{"version":3,"sources":["assets\\start-scene\\scripts\\EventDispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAQ5C;IAAqC,mCAAY;IAG7C;QAAA,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;IACrB,CAAC;IAEM,uCAAa,GAApB,UAAqB,OAAiB;QAClC,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,IAAI,IAAI,KAAK,EAAE;YACf,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAC/C,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;aAC3D;SACJ;IACL,CAAC;IAEM,0CAAgB,GAAvB,UAAwB,GAAW,EAAE,QAAkB,EAAE,OAAqB;QAC1E,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAI,IAAI,IAAI,KAAK,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,CAAC;YAC7B,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC5B;QAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC/C,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,OAAO,EAAE;gBAClE,OAAO;aACV;SACJ;QAED,KAAK,CAAC,IAAI,CAAC;YACP,KAAK,EAAE,QAAQ;YACf,MAAM,EAAE,OAAO;SAClB,CAAC,CAAA;IACN,CAAC;IAEM,6CAAmB,GAA1B,UAA2B,GAAW,EAAE,QAAkB,EAAE,OAAqB;QAC7E,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,IAAI,IAAI,KAAK,EAAE;YACf,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAC/C,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,OAAO,EAAE;oBAClE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACvB,OAAO;iBACV;aACJ;SACJ;IACL,CAAC;IA9CQ,eAAe;QAD3B,OAAO;OACK,eAAe,CA+C3B;IAAD,sBAAC;CA/CD,AA+CC,CA/CoC,EAAE,CAAC,SAAS,GA+ChD;AA/CY,0CAAe","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\ninterface EventListener {\r\n    event: Function;\r\n    target: cc.Component;\r\n}\r\n\r\n@ccclass\r\nexport class EventDispatcher extends cc.Component {\r\n    private events: { [key: string]: EventListener[] };\r\n\r\n    constructor() {\r\n        super();\r\n        this.events = {};\r\n    }\r\n\r\n    public dispatchEvent(ccEvent: cc.Event): void {\r\n        const event = this.events[ccEvent.type];\r\n        if (null != event) {\r\n            for (let index = 0; index < event.length; index++) {\r\n                event[index].event.apply(event[index].target, [ccEvent])\r\n            }\r\n        }\r\n    }\r\n\r\n    public addEventListener(key: string, newEvent: Function, _target: cc.Component): void {\r\n        let event = this.events[key];\r\n        if (null == event) {\r\n            this.events[key] = new Array;\r\n            event = this.events[key];\r\n        }\r\n\r\n        for (let index = 0; index < event.length; index++) {\r\n            if (event[index].event == newEvent && event[index].target == _target) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        event.push({\r\n            event: newEvent,\r\n            target: _target\r\n        })\r\n    }\r\n\r\n    public removeEventListener(key: string, newEvent: Function, _target: cc.Component): void {\r\n        const event = this.events[key];\r\n        if (null != event) {\r\n            for (let index = 0; index < event.length; index++) {\r\n                if (event[index].event == newEvent && event[index].target == _target) {\r\n                    event.splice(index, 1);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}