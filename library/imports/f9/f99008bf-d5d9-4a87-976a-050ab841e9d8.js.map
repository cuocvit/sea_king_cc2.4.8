{"version":3,"sources":["assets\\start-scene\\scripts\\MvcEventDispatcher.ts"],"names":[],"mappings":";;;;;;;AAAA,EAAE;AACF,qDAAoD;AAQpD,IAAM,kBAAkB,GAAuB,CAAC;IAC5C,IAAM,gBAAgB,GAAuC,EAAE,CAAC;IAEhE,IAAM,aAAa,GAAG,UAAS,SAAiB,EAAE,KAAe;QAC7D,IAAI,SAAS,EAAE;YACX,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SACpD;aAAM;YACH,KAAK,IAAM,GAAG,IAAI,gBAAgB,EAAE;gBAChC,gBAAgB,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC9C;SACJ;IACL,CAAC,CAAC;IAEF,IAAM,WAAW,GAAG,UAAS,GAAW;QACpC,IAAI,gBAAgB,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YAC/B,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,iCAAe,EAAE,CAAC;SACjD;QACD,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF,OAAO;QACH,aAAa,eAAA;QACb,WAAW,aAAA;QACX,gBAAgB,kBAAA;KACnB,CAAC;AACN,CAAC,CAAC,EAAE,CAAC;AAEI,gDAAkB","file":"","sourceRoot":"/","sourcesContent":["//\r\nimport { EventDispatcher } from './EventDispatcher';\r\n\r\ninterface MvcEventDispatcher {\r\n    dispatchEvent: (eventName: string, event: any) => void;\r\n    getInstance: (key: string) => EventDispatcher;\r\n}\r\n\r\n\r\nconst MvcEventDispatcher: MvcEventDispatcher = (function() {\r\n    const _DISPATCHERS_DIC: { [key: string]: EventDispatcher } = {};\r\n\r\n    const dispatchEvent = function(eventName: string, event: cc.Event): void {\r\n        if (eventName) {\r\n            this.getInstance(eventName).dispatchEvent(event);\r\n        } else {\r\n            for (const key in _DISPATCHERS_DIC) {\r\n                _DISPATCHERS_DIC[key].dispatchEvent(event);\r\n            }\r\n        }\r\n    };\r\n\r\n    const getInstance = function(key: string): EventDispatcher {\r\n        if (_DISPATCHERS_DIC[key] == null) {\r\n            _DISPATCHERS_DIC[key] = new EventDispatcher();\r\n        }\r\n        return _DISPATCHERS_DIC[key];\r\n    };\r\n\r\n    return {\r\n        dispatchEvent,\r\n        getInstance,\r\n        _DISPATCHERS_DIC\r\n    };\r\n})();\r\n\r\nexport { MvcEventDispatcher };"]}