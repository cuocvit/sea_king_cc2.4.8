{"version":3,"sources":["assets\\start-scene\\scripts\\BrowserUtils.ts"],"names":[],"mappings":";;;;;;;AAEA;IAAA;IA0CA,CAAC;IAzCkB,mBAAM,GAArB,UAAsB,CAAC;QACnB,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACtC,CAAC;IAEc,uBAAU,GAAzB,UAA0B,CAAS;QAC/B,OAAO,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,CAAC;IACzC,CAAC;IAGa,gCAAmB,GAAjC,UAAkC,SAAiB,EAAE,IAAsB;QACvE,IAAM,GAAG,GAAG,IAAI,MAAM,CAAC,OAAO,GAAG,SAAS,GAAG,eAAe,CAAC,CAAC;QAC9D,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAI,MAAM,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;YAC3B,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,QAAQ,IAAI,OAAO,IAAI,EAAE;gBACzB,OAAO,KAAK,CAAC;aAEhB;iBAAM,IAAI,QAAQ,IAAI,OAAO,IAAI,EAAE;gBAChC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;aAE7D;iBAAM,IAAI,SAAS,IAAI,OAAO,IAAI,EAAE;gBACjC,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;aAE1D;iBAAM;gBACH,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,OAAO,IAAI,CAAC,CAAC;gBAC1C,OAAO,KAAK,CAAC;aAChB;SAEJ;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAEc,8BAAiB,GAAhC;QACI,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,WAAW,EAAE,OAAO;YAC3E,IAAM,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,OAAO,WAAW,CAAC;QACvB,CAAC,EAAE,EAA4B,CAAC,CAAA;IACpC,CAAC;IACL,mBAAC;AAAD,CA1CA,AA0CC,IAAA;AA1CY,oCAAY","file":"","sourceRoot":"/","sourcesContent":["\r\n\r\nexport class BrowserUtils {\r\n    private static is_int(t): boolean {\r\n        return /^-{0,1}\\d+$/.test(t + \"\");\r\n    }\r\n\r\n    private static is_boolean(t: string): boolean {\r\n        return \"true\" === t || \"false\" === t;\r\n    }\r\n\r\n\r\n    public static get_url_param_value(paramName: string, type: boolean | number): string | number | boolean {\r\n        const reg = new RegExp(\"(^|&)\" + paramName + \"=([^&]*)(&|$)\");\r\n        const result = window.location.search.substr(1).match(reg);\r\n        if (result && \"\" != result[2]) {\r\n            const param = result[2];\r\n\r\n            if (\"string\" == typeof type) {\r\n                return param;\r\n\r\n            } else if (\"number\" == typeof type) {\r\n                return (this.is_int(type) ? parseInt : parseFloat)(param);\r\n\r\n            } else if (\"boolean\" == typeof type) {\r\n                return this.is_boolean(param) ? \"true\" == param : type;\r\n\r\n            } else {\r\n                console.log(\"不支持的URL参数类型 \" + typeof type);\r\n                return param;\r\n            }\r\n\r\n        } else {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    private static get_url_param_obj(): Record<string, string> {\r\n        return window.location.search.substr(1).split(\"&\").reduce((accumulator, current) => {\r\n            const e = current.split(\"=\");\r\n            accumulator[decodeURIComponent(e[0])] = decodeURIComponent(e[1]);\r\n            return accumulator;\r\n        }, {} as Record<string, string>)\r\n    }\r\n}"]}