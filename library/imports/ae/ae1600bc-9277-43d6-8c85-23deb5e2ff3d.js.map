{"version":3,"sources":["assets\\start-scene\\scripts\\TaskData.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { TaskConfig } from '../../common/configs/task';\r\nimport { BuildTypeEnum, RewardIdEnum, SetItemNumEnum } from './Constants';\r\nimport { gm } from './GameManager';\r\nimport { StorageBase } from './StorageBase';\r\nimport { Utils } from './Utils';\r\n\r\n// @\r\nexport enum TaskState {\r\n    NONE = 0,\r\n    ACCEPT = 1,\r\n    FINISH = 2,\r\n    HAS_RECEIVE = 3\r\n}\r\n\r\n// @\r\nexport enum TaskConditionType {\r\n    BREAK_BARREL = 1,\r\n    MERGE_HERO = 2,\r\n    CASTLE_UPGRADE = 3,\r\n    HOUSE_UPGRADE = 4,\r\n    LIGHTHOUSE_UPGRADE = 5,\r\n    BOAT_UPGRADE = 6,\r\n    MINING_WELL_UPGRADE = 7,\r\n    SAWMILL_UPGRADE = 8,\r\n    BARRACK_UPGRADE = 9,\r\n    DEFENSE_HERO_UPGRADE = 10,\r\n    ATTACK_ISLAND = 11,\r\n    DESTROY_BUILDING = 12,\r\n    MERGE = 13,\r\n    UNLOCK_CAVERN = 14,\r\n    UNLOCK_GLACIER = 15,\r\n    UNLOCK_FLAME_MOUNTAIN = 16,\r\n    GET_STAR = 17,\r\n    BOOTH_UPGRADE = 18,\r\n    UNLOCK_TURTLE = 19,\r\n    FISHING_LODGE_UPGRADE = 20,\r\n    COOKHOUSE_UPGRADE = 21,\r\n    WORKSHOP_UPGRADE = 22,\r\n    UNLOCK_ELF = 23,\r\n    POSEIDON = 24,\r\n    AUTOCOMPOSE = 25\r\n}\r\n\r\n// @\r\nexport class TaskItemData {\r\n    public type: number;\r\n    public id: number;\r\n    public lv: number;\r\n    public task_end_timestamp: number;\r\n    public state: TaskState;\r\n    public count: number;\r\n    public is_new: boolean;\r\n    // @\r\n    constructor() {\r\n        this.type = 0;\r\n        this.id = 0;\r\n        this.lv = 0;\r\n        this.task_end_timestamp = 0;\r\n        this.state = TaskState.NONE;\r\n        this.count = 0;\r\n        this.is_new = true;\r\n    }\r\n\r\n    // @\r\n    public get_config(): TaskConfig {\r\n        return gm.config.get_row_data(\"TaskConfigData\", `${this.type}`, `${this.lv}`, `${this.id}`) as TaskConfig;\r\n    }\r\n} // end: TaskItemData class\r\n\r\n// @\r\nexport class TaskData extends StorageBase {\r\n    public static EVENT_DATA_CHANGE: string = \"task_data_change\";\r\n    public static task_building_map: { [key: number]: number } | null = null;\r\n    //\r\n    public task_data_array: TaskItemData[];\r\n    public daily_task_count: number;\r\n    public main_task_count: number;\r\n    public main_task_complete_count: number;\r\n\r\n    // @\r\n    constructor() {\r\n        super();\r\n        this.STORAGE_KEY = \"TaskData\";\r\n        this.is_init = false;\r\n        this.task_data_array = [];\r\n        this.daily_task_count = 2;\r\n        this.main_task_count = 1;\r\n        this.main_task_complete_count = 0;\r\n    }\r\n\r\n    // @\r\n    public async_read_data(callback?: (data: any) => void): void {\r\n        super.async_read_data((data) => {\r\n            if (this.is_init) {\r\n                let completedCount = 0;\r\n                const currentTime = Date.now();\r\n                for (const task of this.task_data_array) {\r\n                    Object.setPrototypeOf(task, TaskItemData.prototype);\r\n                    if (task.task_end_timestamp > 0 && task.task_end_timestamp < currentTime) {\r\n                        gm.data.task_data.get_next_task(task);\r\n                        completedCount++;\r\n                    }\r\n                }\r\n                if (completedCount > 0) this.async_write_data();\r\n                if (this.main_task_complete_count == null) {\r\n                    this.main_task_complete_count = 0;\r\n                }\r\n            } else {\r\n                for (let i = 0; i < this.daily_task_count; i++) {\r\n                    const newTask = new TaskItemData();\r\n                    newTask.type = 1;\r\n                    this.task_data_array.push(this.get_next_task(newTask));\r\n                }\r\n                const mainTask = new TaskItemData();\r\n                mainTask.type = 2;\r\n                this.task_data_array.push(this.get_next_task(mainTask));\r\n                this.main_task_complete_count = 0;\r\n                this.is_init = true;\r\n                this.async_write_data();\r\n            }\r\n            if (callback) callback(data);\r\n        });\r\n    } // end: async_read_data\r\n\r\n    // @\r\n    public async_write_data(callback?: () => void): void {\r\n        gm.data.event_emitter.emit(TaskData.EVENT_DATA_CHANGE);\r\n        super.async_write_data(callback);\r\n    }\r\n\r\n    // @\r\n    public get_next_task(task: TaskItemData): TaskItemData {\r\n        if (task.type === 1) {\r\n            const buildData = gm.data.mapCell_data.getBuildDataByType(BuildTypeEnum.TOWER_TYPE);\r\n            const buildLevel: string = (buildData && buildData.buildLvl > 0) ? buildData.buildLvl.toString() : \"1\";\r\n            const taskConfigArray = [].concat(gm.config.get_row_data_array(\"TaskConfigData\", task.type.toString(), buildLevel)) as TaskConfig[];\r\n            //\r\n            for (let i = 0; i < this.daily_task_count; i++) {\r\n                const existingTask = this.task_data_array[i];\r\n                if (!existingTask) continue;\r\n                for (let n = taskConfigArray.length - 1; n >= 0; n--) {\r\n                    const configTask = taskConfigArray[n];\r\n                    if (existingTask.id === configTask.task_id) {\r\n                        taskConfigArray.splice(n, 1);\r\n                    }\r\n                    // gốc (code gốc có thể đã sai)\r\n                    /* const configTask = taskConfigArray[i];\r\n                    if (existingTask.id === configTask.task_id) {\r\n                        taskConfigArray.splice(i, 1);\r\n                    } */\r\n                }\r\n            }\r\n            //\r\n            if (taskConfigArray.length > 0) {\r\n                const randomTask = taskConfigArray[Utils.math_random(true, 0, taskConfigArray.length)];\r\n                task.type = randomTask.type;\r\n                task.id = randomTask.task_id;\r\n                task.lv = randomTask.lv;\r\n                task.task_end_timestamp = 1000 * randomTask.timeout + Date.now();\r\n                task.state = TaskState.ACCEPT;\r\n                task.count = 0;\r\n            }\r\n        } else if (task.type === 2) {\r\n            const taskCfg = gm.config.get_row_data(\"TaskConfigData\", \"2\", \"0\", task.id.toString()) as TaskConfig\r\n            const nextId = task.id === 0 ? 20001 : taskCfg.next_id;\r\n            const nextTaskConfig = gm.config.get_row_data(\"TaskConfigData\", \"2\", \"0\", nextId.toString()) as TaskConfig\r\n            if (nextTaskConfig) {\r\n                task.id = nextId;\r\n                task.task_end_timestamp = 0;\r\n                task.state = TaskState.ACCEPT;\r\n                task.count = 0;\r\n                this.update_task_progress(nextTaskConfig.condition_type, 0);\r\n            }\r\n        }\r\n        return task;\r\n    } // end: get_next_task\r\n\r\n    // @\r\n    public update_task_progress(conditionType: number, value: number = 1): void {\r\n        for (const task of this.task_data_array) {\r\n            const config = task.get_config();\r\n            if (config && config.condition_type === conditionType) {\r\n                this.do_update_task_progress(task, conditionType, config.condition_value, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    // @\r\n    public update_build_task_progress(buildType: number): void {\r\n        let taskCondition: number = 0;\r\n        switch (buildType) {\r\n            case BuildTypeEnum.TOWER_TYPE:\r\n                taskCondition = TaskConditionType.CASTLE_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.PRIVATEHOUSING_TYPE:\r\n                taskCondition = TaskConditionType.HOUSE_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.WHARFTAX_TYPE:\r\n                taskCondition = TaskConditionType.LIGHTHOUSE_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.MININGWELL_TYPE:\r\n                taskCondition = TaskConditionType.MINING_WELL_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.LOGGINGFIELD_TYPE:\r\n                taskCondition = TaskConditionType.SAWMILL_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.BARRACKS_TYPE:\r\n                taskCondition = TaskConditionType.BARRACK_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.GARRISION_TYPE:\r\n                taskCondition = TaskConditionType.DEFENSE_HERO_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.STALL_TYPE:\r\n                taskCondition = TaskConditionType.BOOTH_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.FISHHOUSE_TYPE:\r\n                taskCondition = TaskConditionType.FISHING_LODGE_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.FARMHOUSE_TYPE:\r\n                taskCondition = TaskConditionType.COOKHOUSE_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.WORKHOUSE_TYPE:\r\n                taskCondition = TaskConditionType.WORKSHOP_UPGRADE;\r\n                break;\r\n            case BuildTypeEnum.SEAGOINGBOAT_TYPE:\r\n                taskCondition = TaskConditionType.BOAT_UPGRADE;\r\n                break;\r\n        }\r\n        this.update_task_progress(taskCondition);\r\n    } // end: update_build_task_progress\r\n\r\n    // @\r\n    private do_update_task_progress(task: TaskItemData, conditionType: number, conditionValue: number, increment: number): void {\r\n        switch (conditionType) {\r\n            case TaskConditionType.BREAK_BARREL:\r\n            case TaskConditionType.MERGE_HERO:\r\n            case TaskConditionType.ATTACK_ISLAND:\r\n            case TaskConditionType.DESTROY_BUILDING:\r\n            case TaskConditionType.MERGE:\r\n            case TaskConditionType.GET_STAR:\r\n            case TaskConditionType.UNLOCK_CAVERN:\r\n            case TaskConditionType.UNLOCK_GLACIER:\r\n            case TaskConditionType.UNLOCK_FLAME_MOUNTAIN:\r\n            case TaskConditionType.UNLOCK_TURTLE:\r\n            case TaskConditionType.UNLOCK_ELF:\r\n            case TaskConditionType.POSEIDON:\r\n            case TaskConditionType.AUTOCOMPOSE:\r\n                task.count += increment;\r\n                break;\r\n            case TaskConditionType.CASTLE_UPGRADE:\r\n            case TaskConditionType.HOUSE_UPGRADE:\r\n            case TaskConditionType.LIGHTHOUSE_UPGRADE:\r\n            case TaskConditionType.BOAT_UPGRADE:\r\n            case TaskConditionType.MINING_WELL_UPGRADE:\r\n            case TaskConditionType.SAWMILL_UPGRADE:\r\n            case TaskConditionType.BARRACK_UPGRADE:\r\n            case TaskConditionType.DEFENSE_HERO_UPGRADE:\r\n            case TaskConditionType.BOOTH_UPGRADE:\r\n            case TaskConditionType.FISHING_LODGE_UPGRADE:\r\n            case TaskConditionType.COOKHOUSE_UPGRADE:\r\n            case TaskConditionType.WORKSHOP_UPGRADE:\r\n                if (!TaskData.task_building_map) {\r\n                    TaskData.task_building_map = {\r\n                        [TaskConditionType.CASTLE_UPGRADE]: BuildTypeEnum.TOWER_TYPE,\r\n                        [TaskConditionType.HOUSE_UPGRADE]: BuildTypeEnum.PRIVATEHOUSING_TYPE,\r\n                        [TaskConditionType.LIGHTHOUSE_UPGRADE]: BuildTypeEnum.WHARFTAX_TYPE,\r\n                        [TaskConditionType.BOAT_UPGRADE]: BuildTypeEnum.SEAGOINGBOAT_TYPE,\r\n                        [TaskConditionType.MINING_WELL_UPGRADE]: BuildTypeEnum.MININGWELL_TYPE,\r\n                        [TaskConditionType.SAWMILL_UPGRADE]: BuildTypeEnum.LOGGINGFIELD_TYPE,\r\n                        [TaskConditionType.BARRACK_UPGRADE]: BuildTypeEnum.BARRACKS_TYPE,\r\n                        [TaskConditionType.DEFENSE_HERO_UPGRADE]: BuildTypeEnum.GARRISION_TYPE,\r\n                        [TaskConditionType.BOOTH_UPGRADE]: BuildTypeEnum.STALL_TYPE,\r\n                        [TaskConditionType.FISHING_LODGE_UPGRADE]: BuildTypeEnum.FISHHOUSE_TYPE,\r\n                        [TaskConditionType.COOKHOUSE_UPGRADE]: BuildTypeEnum.FARMHOUSE_TYPE,\r\n                        [TaskConditionType.WORKSHOP_UPGRADE]: BuildTypeEnum.WORKHOUSE_TYPE\r\n                    };\r\n                }\r\n                const buildingType = TaskData.task_building_map[conditionType];\r\n                if (buildingType) {\r\n                    const buildData = gm.data.mapCell_data.getBuildDataByType(buildingType);\r\n                    if (buildData) {\r\n                        task.count = buildData.buildLvl;\r\n                    } else {\r\n                        console.error(\"Building data not found\");\r\n                    }\r\n                } else {\r\n                    console.error(\"Unknown mapping relationship\");\r\n                }\r\n                break;\r\n            default:\r\n                console.error(\"Unknown task condition\");\r\n        }\r\n        if (task.state === TaskState.ACCEPT) {\r\n            if (task.count >= conditionValue) {\r\n                task.state = TaskState.FINISH;\r\n            }\r\n            this.async_write_data();\r\n        }\r\n    } // end: do_update_task_progress\r\n\r\n    // @\r\n    public receive_reward(task: TaskItemData, entity: cc.Node, option: number = 0): void {\r\n        const config = task.get_config();\r\n        if (task.count < config.condition_value || task.state !== TaskState.FINISH) return;\r\n        gm.audio.play_effect(gm.const.AUDIO_5_TASK_REWARD);\r\n        const rewardData = {\r\n            type: 1,\r\n            idList: [],\r\n            numList: []\r\n        };\r\n        //\r\n        for (const reward of config.reward_array) {\r\n            if (reward.reward_id >= 23001 && reward.reward_id <= 23099) {\r\n                gm.data.mapCell_data.reelUnlcokHero(reward.reward_id);\r\n            } else if (reward.reward_id === RewardIdEnum.GOLD) {\r\n                gm.data.mapCell_data.setAddGameCoin(SetItemNumEnum.ADD_ITEM_TYPE, reward.reward_num);\r\n                gm.ui.show_coin_fly(RewardIdEnum.GOLD, entity.convertToWorldSpaceAR(cc.Vec3.ZERO));\r\n                rewardData.idList.push(reward.reward_id);\r\n                rewardData.numList.push(reward.reward_num);\r\n            } else if (reward.reward_id === RewardIdEnum.DIAMOND) {\r\n                gm.data.mapCell_data.setAddGameDiamond(SetItemNumEnum.ADD_ITEM_TYPE, reward.reward_num);\r\n                gm.ui.show_coin_fly(RewardIdEnum.DIAMOND, entity.convertToWorldSpaceAR(cc.Vec3.ZERO));\r\n                rewardData.idList.push(reward.reward_id);\r\n                rewardData.numList.push(reward.reward_num);\r\n            } else if (reward.reward_id === RewardIdEnum.BARREL) {\r\n                gm.data.mapCell_data.addBarrelNum(reward.reward_num);\r\n                rewardData.idList.push(reward.reward_id);\r\n                rewardData.numList.push(reward.reward_num);\r\n            } else {\r\n                const itemList = [];\r\n                for (let i = 0; i < reward.reward_num; i++) {\r\n                    itemList.push(reward.reward_id);\r\n                }\r\n                gm.data.mapCell_data.addWareHouseList(itemList);\r\n                rewardData.idList.push(reward.reward_id);\r\n                rewardData.numList.push(reward.reward_num);\r\n            }\r\n        }\r\n        //\r\n        task.state = TaskState.HAS_RECEIVE;\r\n        gm.data.task_data.get_next_task(task);\r\n        gm.data.task_data.async_write_data();\r\n        //\r\n        if (rewardData.idList.length > 0) {\r\n            if (option === 2) {\r\n                gm.ui.set_module_args(gm.const.GETDOUBLEOP.key, rewardData);\r\n                gm.ui.async_show_module(gm.const.GETDOUBLEOP);\r\n            } else if (option === 0) {\r\n                gm.ui.set_module_args(gm.const.GETREWARDOP.key, {\r\n                    idList: rewardData.idList,\r\n                    numList: rewardData.numList\r\n                });\r\n                gm.ui.async_show_module(gm.const.GETREWARDOP);\r\n            }\r\n        }\r\n    } // end: receive_reward\r\n}  // end: TaskData class\r\n"]}