{"version":3,"sources":["assets\\task\\scripts\\Task.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { TaskData, TaskItemData, TaskState } from '../../start-scene/scripts/TaskData';\r\nimport { gm } from '../../start-scene/scripts/GameManager';\r\nimport { GameModule } from '../../start-scene/scripts/GameModule';\r\nimport { Timer } from '../../start-scene/scripts/Timer';\r\nimport { Utils } from '../../start-scene/scripts/Utils';\r\nimport { ReportData } from '../../start-scene/scripts/NetUtils';\r\nimport { BundleName } from '../../start-scene/scripts/Constants';\r\n\r\nexport interface TaskArgs {\r\n    world_point: cc.Vec3;\r\n    data: TaskItemData;\r\n}\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nclass Task extends GameModule {\r\n    @property(cc.Node)\r\n    private mask_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private window_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private receive_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private reward_bg_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private flag_tow_node: cc.Node = null;\r\n\r\n    @property(cc.Button)\r\n    private close_btn: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    private receive_btn: cc.Button = null;\r\n\r\n    @property(cc.Label)\r\n    private title_lbl: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    private content_lbl: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    private count_lbl: cc.Label = null;\r\n\r\n    @property(cc.ProgressBar)\r\n    private count_prg: cc.ProgressBar = null;\r\n\r\n    @property(cc.Label)\r\n    private left_sec_lbl: cc.Label = null;\r\n\r\n    @property([cc.Sprite])\r\n    private reward_spr_array: cc.Sprite[] = [];\r\n\r\n    @property([cc.Label])\r\n    private reward_lbl_array: cc.Label[] = [];\r\n\r\n    private _args: TaskArgs = null;\r\n    private _timer: Timer | null = null;\r\n\r\n    protected onEnable(): void {\r\n        this._args = gm.ui.get_module_args(gm.const.Task.key) as TaskArgs;\r\n        this.window_node.position = this.node.convertToNodeSpaceAR(this._args.world_point);\r\n        gm.data.event_emitter.on(TaskData.EVENT_DATA_CHANGE, this.update_view, this);\r\n        this.mask_node.on(cc.Node.EventType.TOUCH_END, this.on_touch_end_handler, this);\r\n        this.update_view();\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        gm.data.event_emitter.off(TaskData.EVENT_DATA_CHANGE, this.update_view, this);\r\n        this.mask_node.off(cc.Node.EventType.TOUCH_END, this.on_touch_end_handler, this);\r\n        this._timer && this._timer.is_running && this._timer.stop();\r\n    }\r\n\r\n    private update_view(): void {\r\n        const data = this._args.data;\r\n        const dataConfig = data.get_config();\r\n\r\n        if (dataConfig) {\r\n            this.title_lbl.string = dataConfig.name;\r\n            if (1 == data.type) {\r\n                this.content_lbl.string = dataConfig.content;\r\n            } else if (2 == data.type) {\r\n                this.content_lbl.string = cc.js.formatStr(dataConfig.content, data.count + \"/\" + dataConfig.condition_value);\r\n            }\r\n            this.count_lbl.string = data.count + \"/\" + dataConfig.condition_value;\r\n            this.count_prg.progress = data.count / dataConfig.condition_value;\r\n\r\n            for (let index = 0; index < this.reward_spr_array.length; index++) {\r\n                const rewardSpr = this.reward_spr_array[index];\r\n                const rewardLbl = this.reward_lbl_array[index];\r\n                if (index < dataConfig.reward_array.length) {\r\n                    rewardSpr.node.active = true;\r\n                    rewardLbl.node.active = true;\r\n                    Utils.async_set_sprite_frame(rewardSpr, BundleName.TASK, \"res/\" + dataConfig.reward_array[index].reward_id);\r\n                    rewardLbl.string = \"x\" + dataConfig.reward_array[index].reward_num;\r\n                } else {\r\n                    rewardSpr.node.active = false;\r\n                    rewardLbl.node.active = false;\r\n                }\r\n            }\r\n            this.flag_tow_node.active = 1 < dataConfig.times;\r\n        }\r\n\r\n        if (data.state == TaskState.ACCEPT) {\r\n            this.receive_node.active = false;\r\n            this.reward_bg_node.color = gm.const.TASK_NOT_COMPLETE_COLOR;\r\n            if (0 < data.task_end_timestamp) {\r\n                const remainingTimeInSeconds = Math.ceil((data.task_end_timestamp - Date.now()) / 1e3);\r\n                if (0 < remainingTimeInSeconds) {\r\n                    this.left_sec_lbl.node.active = true;\r\n                    if (!this._timer) {\r\n                        this._timer = new Timer;\r\n                    }\r\n\r\n                    this._timer.start((t, e) => {\r\n                        const remainingTimeInSeconds = Math.ceil((data.task_end_timestamp - Date.now()) / 1e3);\r\n                        this.left_sec_lbl.string = Utils.format_time(remainingTimeInSeconds);\r\n\r\n                        if (e <= t) {\r\n                            gm.data.task_data.get_next_task(data);\r\n                            gm.data.task_data.async_write_data();\r\n                            this.update_view();\r\n                        }\r\n                    }, 1e3, remainingTimeInSeconds);\r\n\r\n                } else {\r\n                    gm.data.task_data.get_next_task(data);\r\n                    gm.data.task_data.async_write_data();\r\n                    this.update_view();\r\n                }\r\n\r\n            } else {\r\n                this.left_sec_lbl.node.active = false;\r\n            }\r\n\r\n        } else if (data.state == TaskState.FINISH) {\r\n            this.receive_node.active = true;\r\n            this.reward_bg_node.color = gm.const.TASK_COMPLETE_COLOR;\r\n            this.left_sec_lbl.node.active = false;\r\n        }\r\n    }\r\n\r\n    private editor_on_button_click_handler(event: cc.Event): void {\r\n        if (event.target == this.close_btn.node) {\r\n            gm.ui.async_hide_module(gm.const.Task);\r\n        } else if (event.target == this.receive_btn.node) {\r\n            gm.data.task_data.receive_reward(this._args.data, this.reward_bg_node, 2);\r\n            gm.channel.report_event(\"receive_task_reward\", {\r\n                event_desc: \"领取任务奖励\",\r\n                desc: \"领取日常任务奖励\"\r\n            });\r\n\r\n            ReportData.instance.report_once_point(10801);\r\n            ReportData.instance.report_point(10802);\r\n            gm.ui.async_hide_module(gm.const.Task)\r\n        }\r\n    }\r\n\r\n    private on_touch_end_handler(event: cc.Event): void {\r\n        if (event.target == this.mask_node) {\r\n            gm.ui.async_hide_module(gm.const.Task);\r\n        }\r\n    }\r\n}\r\n\r\nexport { Task };"]}