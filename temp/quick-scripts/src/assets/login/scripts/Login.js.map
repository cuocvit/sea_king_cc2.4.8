{"version":3,"sources":["assets\\login\\scripts\\Login.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// qg ??????\r\nimport { GameModule } from \"../../start-scene/scripts/GameModule\";\r\nimport { BundleName } from \"../../start-scene/scripts/Constants\";\r\nimport { NodePoolItem } from \"../../start-scene/scripts/NodePoolItem\";\r\nimport { Utils } from \"../../start-scene/scripts/Utils\";\r\nimport { gm } from \"../../start-scene/scripts/GameManager\";\r\nimport { LoadingState } from \"../../start-scene/scripts/Launch\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nclass Login extends GameModule {\r\n    @property(cc.EditBox)\r\n    nickname: cc.EditBox = null;\r\n\r\n    @property(cc.EditBox)\r\n    password: cc.EditBox = null;\r\n\r\n    @property(cc.Button)\r\n    login: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    creat: cc.Button = null;\r\n\r\n    @property(cc.Label)\r\n    error: cc.Label = null;\r\n\r\n    public Login() {\r\n        this.error.string = \"\";\r\n        console.log(this.nickname.string, this.password.string);\r\n        if (this.nickname.string == \"\") {\r\n            this.error.string = \"Chưa nhập tài khoản\";\r\n        } else if (this.password.string == \"\") {\r\n            this.error.string = \"Chưa nhập mật khẩu\";\r\n        } else {\r\n            \r\n            gm.ui.Login = true;\r\n            cc.director.loadScene(\"game\");\r\n        }\r\n    }\r\n    // @property(cc.Label)\r\n    // private prompt_lbl: cc.Label | null = null;\r\n\r\n    // @property(cc.ProgressBar)\r\n    // private bar_node: cc.ProgressBar | null = null;\r\n\r\n    // @property(cc.ProgressBar)\r\n    // private bar_node_2: cc.ProgressBar | null = null;\r\n\r\n    // @property(cc.Node)\r\n    // private start_node: cc.Node | null = null;\r\n\r\n    // @property(cc.Node)\r\n    // private start_full_node: cc.Node | null = null;\r\n\r\n    // @property(cc.Node)\r\n    // private caves_node: cc.Node | null = null;\r\n\r\n    // @property(cc.Node)\r\n    // private reward_node: cc.Node | null = null;\r\n\r\n    // @property(cc.Node)\r\n    // private boat_node: cc.Node | null = null;\r\n\r\n    // @property(cc.Animation)\r\n    // private boat_anim: cc.Animation | null = null;\r\n\r\n    // @property([cc.Node])\r\n    // private hero_node_array: cc.Node[] = [];\r\n\r\n    // @property(cc.Sprite)\r\n    // private people_spr: cc.Sprite | null = null;\r\n\r\n    // @property(cc.Sprite)\r\n    // private people_text_spr: cc.Sprite | null = null;\r\n\r\n    // private _low_speed: number = 20;\r\n    // private _low_speed_2: number = 100;\r\n    // private _total_len: number = 0;\r\n    // private _total_len_2: number = 0;\r\n    // private _high_speed: number = 500;\r\n    // private _count: number = 0;\r\n    // private _state: LoadingState;\r\n    // private _last_state: LoadingState;\r\n\r\n    // get state(): LoadingState {\r\n    //     return this._state;\r\n    // }\r\n\r\n    // set state(value: LoadingState) {\r\n    //     if (this._state != value) {\r\n    //         this._last_state = this._state;\r\n    //         this._state = value;\r\n    //         if (this._state !== LoadingState.COMPLETE) {\r\n    //             this.start_load();\r\n    //         } else if (this._state === LoadingState.COMPLETE) {\r\n    //             this.complete_load();\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    protected update(deltaTime: number): void {\r\n        // if (this._state == LoadingState.COMPLETE) {\r\n        //     this._total_len += deltaTime * this._high_speed;\r\n        //     this._total_len_2 += deltaTime * this._high_speed;\r\n        //     this.bar_node!.progress = Math.floor(this._total_len) / 100;\r\n        //     this.bar_node_2!.progress = (this._total_len_2 % 100) / 100;\r\n        //     if (this._total_len >= 100) {\r\n        //         this.node.active = false;\r\n        //     }\r\n        //     if (cc.sys.platform == cc.sys.OPPO_GAME) {\r\n        //         qg.setLoadingProgress({ progress: this._total_len });\r\n        //     }\r\n        // } else {\r\n        //     if (this._total_len < 90) {\r\n        //         this._total_len += deltaTime * this._low_speed;\r\n        //         this.bar_node!.progress = Math.floor(this._total_len) / 100;\r\n        //     }\r\n        //     this._total_len_2 += deltaTime * this._low_speed_2;\r\n        //     this.bar_node_2!.progress = (this._total_len_2 % 100) / 100;\r\n        // }\r\n    }\r\n\r\n    private start_load(): void {\r\n        // this.node.active = true;\r\n        // this.start_node!.active = this._state == LoadingState.START;\r\n        // this.start_full_node!.active = this._state == LoadingState.START_FULL;\r\n        // this.caves_node!.active = this._state == LoadingState.CAVES_FULL;\r\n        // this.reward_node!.active = this._state == LoadingState.REWARD_FULL;\r\n        // this.boat_node!.active =\r\n        //     this._state == LoadingState.BOAT_IN ||\r\n        //     this._state == LoadingState.BOAT_OUT;\r\n        // if (this._state == LoadingState.BOAT_IN) {\r\n        //     this.people_spr!.node.active = false;\r\n        //     this.people_text_spr!.node.active = false;\r\n        // } else if (this._state == LoadingState.BOAT_OUT) {\r\n        //     const t: number = (this._count % 2) + 1;\r\n        //     this.people_spr!.node.active = true;\r\n        //     this.people_text_spr!.node.active = true;\r\n        //     Utils.async_set_sprite_frame(\r\n        //         this.people_spr!,\r\n        //         BundleName.LOADING,\r\n        //         `res/people_${t}`\r\n        //     );\r\n        //     Utils.async_set_sprite_frame(\r\n        //         this.people_text_spr!,\r\n        //         BundleName.LOADING,\r\n        //         `res/people_text_${t}`\r\n        //     );\r\n        //     this._count++;\r\n        // }\r\n        // this._total_len = 0;\r\n        // this._total_len_2 = 0;\r\n        // if (this._state == LoadingState.BOAT_IN) {\r\n        //     this.boat_anim!.once(cc.Animation.EventType.FINISHED, () => {\r\n        //         this.boat_anim!.play(\"loding_ship_innormal\");\r\n        //     });\r\n        //     this.boat_anim!.play(\"loding_ship_inopen\");\r\n        //     const aliveHeroDataArray =\r\n        //         gm.data.fight_temp_data.fight_result_data.alive_hero_data_array;\r\n        //     for (let i = 0; i < this.hero_node_array.length; i++) {\r\n        //         const heroData = aliveHeroDataArray[i];\r\n        //         const heroNode = this.hero_node_array[i];\r\n        //         this.load_hero_model(\r\n        //             heroNode,\r\n        //             heroData ? heroData.id : 0,\r\n        //             i,\r\n        //             aliveHeroDataArray.length\r\n        //         );\r\n        //     }\r\n        // } else if (this._state == LoadingState.BOAT_OUT) {\r\n        //     this.boat_anim!.once(cc.Animation.EventType.FINISHED, () => {\r\n        //         this.boat_anim!.play(\"loding_ship_outnormal\");\r\n        //     });\r\n        //     this.boat_anim!.play(\"loding_ship_outopen\");\r\n        //     const battleHeroArray = gm.data.fight_temp_data.battle_hero_array;\r\n        //     for (let i = 0; i < this.hero_node_array.length; i++) {\r\n        //         const heroData = battleHeroArray[i];\r\n        //         const heroNode = this.hero_node_array[i];\r\n        //         this.load_hero_model(\r\n        //             heroNode,\r\n        //             heroData ? heroData.itemID : 0,\r\n        //             i,\r\n        //             battleHeroArray.length\r\n        //         );\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private load_hero_model(\r\n        heroNode: cc.Node,\r\n        heroId: number,\r\n        index: number,\r\n        total: number\r\n    ): void {\r\n        if (heroId > 0) {\r\n            if (heroNode.childrenCount == 0) {\r\n                if (index < total) {\r\n                    heroNode.active = true;\r\n                    gm.pool.async_get(\r\n                        BundleName.COMMON,\r\n                        `prefabs/model/${heroId}`,\r\n                        NodePoolItem,\r\n                        (item) => {\r\n                            if (!item) return;\r\n                            if (heroNode.childrenCount == 0) {\r\n                                heroNode.addChild(item.node);\r\n                                const skeleton = item.getComponent(sp.Skeleton);\r\n                                if (skeleton) {\r\n                                    skeleton.setSkin(\"front\");\r\n                                    skeleton.setAnimation(0, \"stay\", true);\r\n                                }\r\n                            } else {\r\n                                gm.pool.put(item.node);\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            } else {\r\n                heroNode.active = false;\r\n                gm.pool.put_children(heroNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    private complete_load(): void {\r\n        // if (this._last_state == LoadingState.BOAT_IN) {\r\n        //     this.boat_anim!.once(cc.Animation.EventType.FINISHED, () => {\r\n        //         this.do_complete_load();\r\n        //     });\r\n        //     this.boat_anim!.play(\"loding_ship_inclose\");\r\n        // } else if (this._last_state == LoadingState.BOAT_OUT) {\r\n        //     this.boat_anim!.once(cc.Animation.EventType.FINISHED, () => {\r\n        //         this.do_complete_load();\r\n        //     });\r\n        //     this.boat_anim!.play(\"loding_ship_outclose\");\r\n        // } else {\r\n        //     this.do_complete_load();\r\n        // }\r\n    }\r\n\r\n    private do_complete_load(): void {\r\n        // for (let i = 0; i < this.hero_node_array.length; i++) {\r\n        //     const heroNode = this.hero_node_array[i];\r\n        //     heroNode.active = false;\r\n        //     gm.pool.put_children(heroNode);\r\n        // }\r\n        // this.start_node!.active = false;\r\n        // this.start_full_node!.active = false;\r\n        // this.caves_node!.active = false;\r\n        // this.reward_node!.active = false;\r\n        // this.boat_node!.active = false;\r\n        // this.node.active = false;\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        // this.start_node!.active = false;\r\n        // this.start_full_node!.active = false;\r\n        // this.caves_node!.active = false;\r\n        // this.reward_node!.active = false;\r\n        // this.boat_node!.active = false;\r\n        // if (cc.sys.platform == cc.sys.OPPO_GAME) {\r\n        //     qg.loadingComplete({});\r\n        // }\r\n    }\r\n}\r\n\r\nexport { Login };\r\n"]}