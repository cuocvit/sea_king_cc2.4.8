{"version":3,"sources":["assets\\fight\\scripts\\Fight.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ListView } from '../../start-scene/scripts/ListView';\r\nimport { GameModule } from '../../start-scene/scripts/GameModule';\r\nimport { FightConstants, HeroType, HeroInBattleState, HeroFightState, FightDynamicNodeLayer } from '../../start-scene/scripts/FightConstants';\r\nimport { FightState } from '../../start-scene/scripts/FightData';\r\nimport { ConstantsData } from '../../start-scene/scripts/ConstantsData';\r\nimport { BundleName } from '../../start-scene/scripts/Constants';\r\nimport { gm } from '../../start-scene/scripts/GameManager';\r\nimport { SkillType, SkillPos, AttackType, SkillEffectId } from '../../start-scene/scripts/ConfigData';\r\nimport { FightData } from '../../start-scene/scripts/FightData';\r\nimport { FightTempData, FightTargetSortData, EdgeEnum, FightBuildingItemData, FightHeroItemData, FightWallItemData, FightPropItemData, BuffItemData } from '../../start-scene/scripts/FightTempData';\r\nimport { RecordData } from '../../start-scene/scripts/RecordData';\r\nimport { NodePoolItem } from '../../start-scene/scripts/NodePoolItem';\r\nimport { Utils } from '../../start-scene/scripts/Utils';\r\nimport { ReportData } from '../../start-scene/scripts/NetUtils';\r\nimport { FightHeroItem } from './FightHeroItem';\r\nimport { FightMapItem } from './FightMapItem';\r\nimport { SkillConfig } from '../../common/configs/skill';\r\nimport { HeroConfig } from '../../common/configs/hero';\r\nimport { FightBuildingItem } from './FightBuildingItem';\r\nimport { FightWallItem } from './FightWallItem';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class Fight extends GameModule {\r\n    @property(cc.Node)\r\n    private mask_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private scene_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    public map_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    public effect_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private window_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    public text_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private boat_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private boat_box_node: cc.Node = null;\r\n\r\n    @property(cc.Sprite)\r\n    private boat_spr: cc.Sprite = null;\r\n\r\n    @property(cc.Animation)\r\n    private boat_anim: cc.Animation = null;\r\n\r\n    @property(cc.Node)\r\n    private ui_node: cc.Node = null;\r\n\r\n    @property(cc.Label)\r\n    private name_lbl: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    private left_sec_lbl: cc.Label = null;\r\n\r\n    @property(cc.Button)\r\n    private speed_1_btn: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    private speed_2_btn: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    private return_btn: cc.Button = null;\r\n\r\n    @property(ListView)\r\n    private hero_list: ListView = null;\r\n\r\n    @property(ListView)\r\n    private reward_list: ListView = null;\r\n\r\n    @property(cc.Node)\r\n    private figerAni: cc.Node = null;\r\n\r\n    @property(cc.ParticleSystem)\r\n    private wave_ps: cc.ParticleSystem = null;\r\n\r\n    @property(cc.Node)\r\n    private fight_guider_node: cc.Node = null;\r\n\r\n    //\r\n    protected onEnable(): void {\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move_handler, this);\r\n        this.node._touchListener.setSwallowTouches(false);\r\n        gm.data.event_emitter.on(\"pick_up_prop\", this.on_pick_up_prop_handler, this);\r\n        gm.data.fight_temp_data.build_hero_array();\r\n        gm.data.fight_temp_data.build_reward_array();\r\n        this.init_map();\r\n        this.update_view();\r\n        this.fight_start();\r\n        this.fight_guider_node.active = false;\r\n\r\n        if (13 == gm.data.mapCell_data.roleGuideVO.guideID && !gm.data.mapCell_data.roleGuideVO.isEnd) {\r\n            gm.ui.set_module_args(gm.const.GUIDE_SHOW_TIPS_OP.key, 5);\r\n            gm.ui.show_panel(gm.const.GUIDE_SHOW_TIPS_OP);\r\n        }\r\n    }\r\n\r\n    //\r\n    protected onDisable(): void {\r\n        this.scene_node.off(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move_handler, this);\r\n        gm.data.event_emitter.off(\"pick_up_prop\", this.on_pick_up_prop_handler);\r\n    }\r\n\r\n    \r\n    private on_touch_move_handler(event: cc.Event.EventTouch): void {\r\n        const touches = event.getTouches();\r\n        if (gm.data.mapCell_data.isGuide) return;\r\n        if (touches.length == 2) {\r\n            const touch1 = touches[0];\r\n            const touch2 = touches[1];\r\n            const delta1 = touch1.getDelta();\r\n            const delta2 = touch2.getDelta();\r\n            const location1 = touch1.getLocation();\r\n            const location2 = touch2.getLocation();\r\n            let midPoint = cc.v3(location1.add(location2).multiplyScalar(0.5));\r\n            midPoint = this.scene_node.convertToNodeSpaceAR(midPoint);\r\n\r\n            const deltaLocation = location1.sub(location2);\r\n            const combinedDelta = delta1.sub(delta2);\r\n\r\n            let scale = 1;\r\n            scale = Math.abs(deltaLocation.x) > Math.abs(deltaLocation.y)\r\n                ? (deltaLocation.x + combinedDelta.x) / deltaLocation.x * this.scene_node.scale\r\n                : (deltaLocation.y + combinedDelta.y) / deltaLocation.y * this.scene_node.scale;\r\n\r\n            if (scale < 1) {\r\n                scale = 1;\r\n            } else if (scale < 2) {\r\n                scale = 2;\r\n            }\r\n\r\n            const scaleChange = scale - this.scene_node.scale;\r\n            this.scene_node.scale += scaleChange;\r\n            const scaledMidPoint = midPoint.multiplyScalar(scaleChange);\r\n            this.scene_node.position = this.scene_node.position.sub(scaledMidPoint);\r\n        } else if (touches.length == 1) {\r\n            const delta = event.getDelta();\r\n            this.scene_node.x += delta.x;\r\n            this.scene_node.y += delta.y;\r\n\r\n            if (this.scene_node.x < gm.data.fight_temp_data.min_offset.x) {\r\n                this.scene_node.x = gm.data.fight_temp_data.min_offset.x;\r\n            } else if (this.scene_node.x > gm.data.fight_temp_data.max_offset.x) {\r\n                this.scene_node.x = gm.data.fight_temp_data.max_offset.x;\r\n            }\r\n\r\n            if (this.scene_node.y < gm.data.fight_temp_data.min_offset.y) {\r\n                this.scene_node.y = gm.data.fight_temp_data.min_offset.y\r\n            } else if (this.scene_node.y > gm.data.fight_temp_data.max_offset.y) {\r\n                this.scene_node.y = gm.data.fight_temp_data.max_offset.y\r\n            }\r\n        }\r\n    }\r\n    \r\n    private on_pick_up_prop_handler(index: number): void {\r\n        const item = this.reward_list.getItem(index);\r\n        if (item) {\r\n            item.update_view();\r\n        }\r\n    }\r\n\r\n    \r\n    private init_map(): void {\r\n        if (gm.data.fight_temp_data.play_type < 0) {\r\n            cc.error(\"play_type Giá trị sai:\" + gm.data.fight_temp_data.play_type);\r\n            gm.data.fight_temp_data.play_type = 0;\r\n        }\r\n\r\n        this.mask_node.color = FightConstants.SEA_AREA_COLOR_ARRAY[gm.data.fight_temp_data.play_type];\r\n        const mapData = gm.data.fight_temp_data.build_play_map_data();\r\n        this.scene_node.position = gm.data.fight_temp_data.map_start_position;\r\n        gm.pool.init(BundleName.FIGHT, \"prefabs/fight_map_item\", FightMapItem, 1, () => {\r\n            for (let index = 0; index < mapData.length; index++) {\r\n                (() => {\r\n                    const cellData = mapData[index];\r\n                    if (cellData) {\r\n                        gm.pool.async_get(BundleName.FIGHT, \"prefabs/fight_map_item\", FightMapItem, (mapItem) => {\r\n                            mapItem.node.position = cellData.position;\r\n                            mapItem.data = cellData;\r\n                            this.map_node.addChild(mapItem.node, 0);\r\n                            gm.data.fight_temp_data.is_debug;\r\n                            mapItem.node.name = cc.js.formatStr(\"fight_map_item_%d\", cellData.grid_index);\r\n                            gm.data.fight_temp_data.map_item_array[cellData.cell_id] = mapItem;\r\n                        });\r\n                    }\r\n                })();\r\n            }\r\n            this.show_guider_finger_anim()\r\n        });\r\n\r\n        if (gm.data.fight_temp_data.play_type < 2) {\r\n            this.wave_ps.node.active = true;\r\n            this.wave_ps.startColor = FightConstants.WAVE_START_COLOR_ARRAY[gm.data.fight_temp_data.play_type];\r\n            this.wave_ps.endColor = FightConstants.WAVE_END_COLOR_ARRAY[gm.data.fight_temp_data.play_type];\r\n        } else {\r\n            this.wave_ps.node.active = false;\r\n        }\r\n\r\n    }\r\n    \r\n    private on_click_hide_guider(): void {\r\n        this.fight_guider_node.active = false;\r\n    }\r\n\r\n    private show_guider_finger_anim(): void {\r\n        if (13 != gm.data.mapCell_data.roleGuideVO.guideID || gm.data.mapCell_data.roleGuideVO.isEnd) {\r\n            this.figerAni.active = false;\r\n        } else {\r\n            this.figerAni.active = gm.data.fight_temp_data.goto_battle_count < 2;\r\n            if (this.figerAni.active) {\r\n                const targetIndex = 1 == gm.data.fight_temp_data.goto_battle_count ? 39 : 38;\r\n                const targetPosition = this.map_node.convertToWorldSpaceAR(cc.v2(this.map_node.getChildByName(\"fight_map_item_\" + targetIndex).position));\r\n                this.figerAni.position = this.scene_node.convertToNodeSpaceAR(cc.v3(targetPosition));\r\n            }\r\n\r\n            if (gm.data.mapCell_data.isGuide) {\r\n                if (1 == gm.data.fight_temp_data.goto_battle_count) {\r\n                    gm.channel.report_event(\"ohayoo_game_guide\", {\r\n                        guideid: 14,\r\n                        guidedesc: cc.js.formatStr(\"14.点击上岛1个英雄\")\r\n                    });\r\n                } else if (2 == gm.data.fight_temp_data.goto_battle_count) {\r\n                    gm.channel.report_event(\"ohayoo_game_guide\", {\r\n                        guideid: 15,\r\n                        guidedesc: cc.js.formatStr(\"15.点击上岛1个英雄\")\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    public update(deltaTime: number): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        if (fightTempData.fight_state == FightState.RUN) {\r\n            fightTempData.delta_time = deltaTime * cc.director.getScheduler().getTimeScale();\r\n            fightTempData.total_time += fightTempData.delta_time;\r\n            this.update_hero_action();\r\n            this.update_defense_hero_action();\r\n            this.update_building_action();\r\n            this.update_wall_action();\r\n            this.update_buff_action();\r\n            this.update_view();\r\n            if (fightTempData.total_time > ConstantsData.instance.MAX_FIGHT_TIME) {\r\n                this.fight_revive(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    private apply_passive_skill_effect(): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        this.scheduleOnce(() => {\r\n            for (let i = 0; i < fightTempData.wall_data_array.length; i++) {\r\n                const wallItem = fightTempData.wall_item_array[i];\r\n                const wallData = fightTempData.wall_data_array[i];\r\n\r\n                if (wallData.skill_id > 0 && (!fightTempData.is_debug || wallData.skill_lv > 0)) {\r\n                    const skillData = gm.config.get_row_data(\r\n                        \"SkillConfigData\",\r\n                        wallData.skill_id.toString(),\r\n                        wallData.skill_lv.toString()\r\n                    ) as SkillConfig;\r\n                    if (skillData.skill_type == SkillType.PASSIVE) {\r\n                        wallItem.apply_passive_skill(skillData);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < fightTempData.defense_hero_data_array.length; i++) {\r\n                this.common_hero_apply_passive_skill(fightTempData.defense_hero_data_array[i]);\r\n            }\r\n\r\n            for (i = 0; i < fightTempData.hero_data_array.length; i++) {\r\n                this.common_hero_apply_passive_skill(fightTempData.hero_data_array[i]);\r\n            }\r\n\r\n            for (i = 0; i < fightTempData.passive_hero_data_array.length; i++) {\r\n                this.passive_hero_apply_passive_skill(fightTempData.passive_hero_data_array[i]);\r\n            }\r\n        }, 3)\r\n    }\r\n\r\n    private passive_hero_apply_passive_skill(heroData: FightHeroItemData): void {\r\n        const heroConfig = gm.config.get_row_data(\"HeroConfigData\", heroData.id + \"\") as HeroConfig;\r\n        const skillConfig = gm.config.get_row_data(\"SkillConfigData\", heroData.skill_id + \"\", heroConfig.lv + \"\") as SkillConfig;\r\n\r\n        if (skillConfig.skill_pos == SkillPos.MAIN_CITY) {\r\n            const MainCity = gm.data.fight_temp_data.get_main_city();\r\n            gm.data.fight_temp_data.building_item_array[MainCity.array_index];\r\n            MainCity.max_hp += skillConfig.hp_add;\r\n            MainCity.hp += skillConfig.hp_add;\r\n\r\n            if (\"\" != skillConfig.skill_name) {\r\n                gm.pool.async_get(BundleName.COMMON, \"prefabs/model/\" + skillConfig.skill_name, NodePoolItem, (nodeItem) => {\r\n                    this.effect_node.addChild(nodeItem.node);\r\n                    nodeItem.node.scale = 0.5;\r\n                    nodeItem.node.position = gm.data.fight_temp_data.grid_position_to_position(MainCity.grid_position);\r\n                    const anim = nodeItem.getComponent(cc.Animation);\r\n                    if (anim) {\r\n                        anim.play();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private common_hero_apply_passive_skill(hero: FightHeroItemData): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        if (hero && hero.hero_type == 1) {\r\n            const heroConfig = gm.config.get_row_data(\"HeroConfigData\", hero.id.toString()) as HeroConfig;\r\n            for (let i = 0; i < hero.passive_skill_array.length; i++) {\r\n                const passiveSkillId = hero.passive_skill_array[i];\r\n                const skillConfig = gm.config.get_row_data(\"SkillConfigData\", passiveSkillId.toString(), heroConfig.lv.toString()) as SkillConfig;\r\n                if (skillConfig && skillConfig.skill_type == SkillType.PASSIVE) {\r\n                    if (skillConfig.skill_pos == SkillPos.ALL_SELF_BODY) {\r\n                        let affectedHeroes: FightHeroItemData[] = [];\r\n                        if (hero.type == HeroType.ATTACK) {\r\n                            affectedHeroes = fightTempData.hero_data_array;\r\n                        } else {\r\n                            affectedHeroes = fightTempData.defense_hero_data_array;\r\n                        }\r\n\r\n                        affectedHeroes.forEach((affectedHero) => {\r\n                            if (affectedHero) {\r\n                                affectedHero.passive_attack_bonus_ratio += skillConfig.damage_ratio;\r\n                                affectedHero.passive_defense_bonus_ratio += skillConfig.defense_ratio;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        // console.error(\"未实现的被动释放位置\");\r\n                        console.log(\"Vị trí thả thụ động chưa được thực hiện.\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleHeroAction(num: number): string | { value: any } {\r\n        const g = gm.data.fight_temp_data;\r\n        const heroItem = gm.data.fight_temp_data.hero_item_array[num];\r\n\r\n        if (null == heroItem) {\r\n            return \"continue\";\r\n        }\r\n\r\n        const heroData = gm.data.fight_temp_data.hero_data_array[num];\r\n\r\n        if (heroData.in_battle_state == HeroInBattleState.HAS_IN_BATTLE) {\r\n            if (heroData.fight_state == HeroFightState.WAITING) {\r\n                this.find_next_path(heroData);\r\n\r\n            } else if (heroData.fight_state == HeroFightState.MOVING) {\r\n                if (heroData.move_path.length <= 0) {\r\n                    this.hero_move_one_grid_action(heroData);\r\n                } else {\r\n                    const moveTarget = heroData.move_path[0];\r\n                    const targetPosition = g.grid_position_to_position(cc.v2(moveTarget.x, moveTarget.y)).add(heroData.offset);\r\n                    const sub = targetPosition.sub(heroItem.node.position);\r\n                    const distance = sub.mag();\r\n                    const moveSpeed = g.delta_time * heroData.real_move_speed;\r\n                    const angle = Math.atan2(sub.y, sub.x);\r\n\r\n                    if (0 < distance && moveSpeed < distance) {\r\n                        heroItem.node.position = heroItem.node.position.add(cc.v3(Math.cos(angle), Math.sin(angle)).mul(moveSpeed));\r\n\r\n                    } else {\r\n                        heroItem.node.position = targetPosition;\r\n                        heroData.move_path.shift();\r\n                        const _fightMapItem = g.get_fight_map_item(heroData.grid_position.x, heroData.grid_position.y);\r\n\r\n                        if (_fightMapItem && _fightMapItem.data) {\r\n                            _fightMapItem.data.remove_hero_index(heroData.array_index);\r\n                        }\r\n                        heroData.grid_index = moveTarget.x + moveTarget.y * g.map_size.x;\r\n                        heroData.grid_position.x = moveTarget.x;\r\n                        heroData.grid_position.y = moveTarget.y;\r\n                        heroItem.node.zIndex = gm.data.fight_temp_data.get_dynamic_node_layer(heroData.grid_index, FightDynamicNodeLayer.MOVE);\r\n                        this.hero_move_one_grid_action(heroData);\r\n                    }\r\n                    heroItem.play_spine_anim(heroData.move_path.length <= 0 ? \"stay\" : \"move\", angle);\r\n                }\r\n\r\n            } else if (heroData.fight_state == HeroFightState.ATTACKING) {\r\n                const pathTarget = heroData.find_path_target;\r\n                let targetNode: cc.Node;\r\n                if (pathTarget) {\r\n\r\n                    if (pathTarget instanceof FightBuildingItemData) {\r\n                        const buidingItem = g.building_item_array[pathTarget.array_index];\r\n                        if (buidingItem) {\r\n                            targetNode = buidingItem.node;\r\n                        }\r\n                    } else if (pathTarget instanceof FightHeroItemData) {\r\n                        const defenseHero = g.defense_hero_array[pathTarget.array_index];\r\n                        if (defenseHero) {\r\n                            targetNode = defenseHero.node;\r\n                        }\r\n                    } else if (pathTarget instanceof FightWallItemData) {\r\n                        const wallItem = g.wall_item_array[pathTarget.array_index]\r\n                        if (wallItem) {\r\n                            targetNode = wallItem.node;\r\n                        }\r\n                    } else {\r\n                        // cc.error(\"未知分支情况\");\r\n                        cc.error(\"trường hợp nhánh không xác định\");\r\n                    }\r\n\r\n\r\n                    if (targetNode) {\r\n                        const currentPosition = g.get_fight_map_item(heroData.grid_position.x, heroData.grid_position.y);\r\n                        const targetPosition = g.get_fight_map_item(heroData.find_path_target.grid_position.x, heroData.find_path_target.grid_position.y);\r\n                        if (currentPosition && targetPosition && targetPosition.node.position.sub(currentPosition.node.position).mag() > heroData.attack_range) {\r\n                            heroData.find_path_target = null;\r\n                            heroData.move_path = [];\r\n                            heroData.fight_state = HeroFightState.WAITING;\r\n                            return { value: undefined };\r\n                        }\r\n\r\n                        if (0 < heroData.attack_value && 0 < pathTarget.hp) {\r\n                            if (0 == heroData.last_attack_time || g.total_time - heroData.last_attack_time > heroData.real_attack_interval) {\r\n                                heroData.last_attack_time = g.total_time;\r\n                                heroData.attack_count++;\r\n\r\n                                const targetWorldPosition = g.grid_position_to_position(cc.v2(pathTarget.grid_position.x, pathTarget.grid_position.y));\r\n                                const heroWorldPosition = g.grid_position_to_position(heroData.grid_position);\r\n                                const directionVector = targetWorldPosition.sub(heroWorldPosition);\r\n                                const attackAngle = Math.atan2(directionVector.y, directionVector.x);\r\n\r\n                                if (heroData.attack_count % (FightConstants.SKILL_INTERVAL_NORMAL_ATTACK_COUNT + 1) == 0 && (gm.data.fight_temp_data.is_debug || 0 < heroData.skill_lv)) {\r\n                                    const skillData = gm.config.get_row_data(\"SkillConfigData\", heroData.skill_id + \"\", heroData.skill_lv + \"\") as SkillConfig;\r\n                                    heroItem.play_skill_audio();\r\n\r\n                                    heroItem.play_spine_anim(\"skill\", attackAngle, false, skillData.fire_time, () => {\r\n                                        if (\"\" != skillData.skill_name) {\r\n                                            if (skillData.skill_pos == SkillPos.ENEMY_BODY || skillData.skill_pos == SkillPos.ALL_ENEMY_BODY) {\r\n                                                if (skillData.skill_type == SkillType.FLY) {\r\n                                                    heroItem.play_skill_fly_anim(skillData, targetNode, attackAngle, () => {\r\n                                                        this.hero_skill_hit(heroData, pathTarget, skillData, () => {\r\n                                                            const defenseHero = g.defense_hero_array[pathTarget.array_index]\r\n\r\n                                                            if (pathTarget instanceof FightHeroItemData && defenseHero && defenseHero.data) {\r\n                                                                this.common_hero_skill_hit_buff(skillData, heroItem, defenseHero, defenseHero.data.grid_position);\r\n                                                            }\r\n                                                        });\r\n                                                    });\r\n                                                } else {\r\n                                                    this.hero_skill_hit(heroData, pathTarget, skillData, () => {\r\n                                                        const defenseHero = g.defense_hero_array[pathTarget.array_index];\r\n\r\n                                                        if (pathTarget instanceof FightHeroItemData && defenseHero && defenseHero.data) {\r\n                                                            this.common_hero_skill_hit_buff(skillData, heroItem, defenseHero, defenseHero.data.grid_position);\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            } else {\r\n                                                if (skillData.skill_pos == SkillPos.SELF_BODY || skillData.skill_pos == SkillPos.ALL_SELF_BODY) {\r\n                                                    heroItem.play_skill_anim(skillData, targetNode, attackAngle, () => {\r\n                                                        this.common_hero_skill_hit_buff(skillData, heroItem, null, null)\r\n                                                    });\r\n\r\n                                                } else {\r\n                                                    if (!(skillData.skill_pos != SkillPos.ONE_CIRCLE_GRID && skillData.skill_pos != SkillPos.TWO_CIRCLE_GRID)) {\r\n                                                        if (skillData.skill_type == SkillType.FLY) {\r\n                                                            heroItem.play_skill_fly_anim(skillData, targetNode, attackAngle, () => {\r\n                                                                this.hero_skill_hit(heroData, pathTarget, skillData, () => {\r\n                                                                    const defenseHero = g.defense_hero_array[pathTarget.array_index];\r\n                                                                    if (pathTarget instanceof FightHeroItemData) {\r\n                                                                        if (defenseHero && defenseHero.data) {\r\n                                                                            this.common_hero_skill_hit_buff(skillData, heroItem, defenseHero, defenseHero.data.grid_position);\r\n                                                                        }\r\n                                                                    } else {\r\n                                                                        this.common_hero_skill_hit_buff(skillData, heroItem, null, pathTarget.grid_position);\r\n                                                                    }\r\n                                                                });\r\n                                                            });\r\n                                                        } else {\r\n                                                            // console.error(\"TODO:暂时没有该分支的情况\");\r\n                                                            console.log(\"Hiện không có nhánh nào.\");\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                        } else if (\"\" != skillData.hit_name) {\r\n                                            if (skillData.skill_pos == SkillPos.ENEMY_BODY || skillData.skill_pos == SkillPos.ALL_ENEMY_BODY) {\r\n                                                this.hero_skill_hit(heroData, pathTarget, skillData, () => {\r\n                                                    const defenseHero = g.defense_hero_array[pathTarget.array_index];\r\n                                                    if (pathTarget instanceof FightHeroItemData && defenseHero && defenseHero.data) {\r\n                                                        this.common_hero_skill_hit_buff(skillData, heroItem, defenseHero, defenseHero.data.grid_position);\r\n                                                    }\r\n                                                });\r\n\r\n                                            } else if (skillData.skill_pos == SkillPos.SELF_BODY || skillData.skill_pos == SkillPos.ALL_SELF_BODY) {\r\n                                                this.hero_skill_hit(heroData, heroData, skillData, () => {\r\n                                                    if (heroItem.data) {\r\n                                                        this.common_hero_skill_hit_buff(skillData, heroItem, heroItem, heroItem.data.grid_position);\r\n                                                    }\r\n                                                });\r\n\r\n                                                if (skillData.skill_pos == SkillPos.ALL_SELF_BODY) {\r\n                                                    for (let index = 0; index < g.hero_item_array.length; index++) {\r\n                                                        ((heroIndex) => {\r\n                                                            const heroItem = g.hero_item_array[heroIndex];\r\n                                                            const heroData = g.hero_data_array[heroIndex];\r\n                                                            if (heroData && heroData != heroData) {\r\n                                                                this.hero_skill_hit(heroData, heroData, skillData, () => {\r\n                                                                    if (heroItem.data) {\r\n                                                                        this.common_hero_skill_hit_buff(skillData, heroItem, heroItem, heroItem.data.grid_position);\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                        })(index);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            const defenseHero = g.defense_hero_array[pathTarget.array_index]\r\n                                            if (pathTarget instanceof FightHeroItemData) {\r\n                                                defenseHero && defenseHero.data && this.common_hero_skill_hit_buff(skillData, heroItem, defenseHero, defenseHero.data.grid_position);\r\n                                            } else {\r\n                                                this.common_hero_skill_hit_buff(skillData, heroItem, null, null);\r\n                                            }\r\n                                        }\r\n                                    }, skillData.prepare_skill_anim_time, () => {\r\n                                        heroItem.play_spine_anim(\"stay\", attackAngle);\r\n                                    });\r\n\r\n                                    if (skillData.prepare_skill_anim_time >= heroData.real_attack_interval) {\r\n                                        // cc.error(\"英雄的攻击动画时间不能大于攻击间隔\");\r\n                                        cc.error(\"Thời gian hoạt ảnh tấn công của anh hùng không thể dài hơn khoảng thời gian tấn công.\");\r\n                                    }\r\n                                } else {\r\n                                    if (!targetNode) {\r\n                                        heroData.find_path_target = null;\r\n                                        heroData.move_path = [];\r\n                                        heroData.fight_state = HeroFightState.WAITING;\r\n                                        return \"continue\";\r\n                                    }\r\n\r\n                                    heroItem.play_attack_audio();\r\n                                    heroItem.play_spine_anim(\"attack\", attackAngle, false, heroData.fly_weapon_time, () => {\r\n                                        if (heroData.attack_type == AttackType.REMOTE) {\r\n                                            heroItem.play_weapon_fly_anim(targetNode, attackAngle, () => {\r\n                                                this.hero_attack_hit(heroData, attackAngle, pathTarget);\r\n                                            })\r\n                                        } else {\r\n                                            this.hero_attack_hit(heroData, attackAngle, pathTarget);\r\n                                        }\r\n                                    }, heroData.attack_anim_time, () => {\r\n                                        heroItem.play_spine_anim(\"stay\", attackAngle);\r\n                                    });\r\n\r\n                                    if (heroData.attack_anim_time >= heroData.real_attack_interval) {\r\n                                        // cc.error(\"英雄的攻击动画时间不能大于攻击间隔\");\r\n                                        cc.error(\"Thời gian hoạt ảnh tấn công của anh hùng không thể dài hơn khoảng thời gian tấn công.\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    cc.error(\"hero_data.find_path_target need != null\");\r\n                }\r\n\r\n                heroData.find_path_target = null;\r\n                heroData.move_path = [];\r\n                heroData.fight_state = HeroFightState.WAITING;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private update_hero_action(): any {\r\n        for (let index = 0; index < gm.data.fight_temp_data.hero_item_array.length; index++) {\r\n            const heroAction = this.handleHeroAction(index);\r\n            if (typeof heroAction === \"object\" && heroAction !== null && \"value\" in heroAction) {\r\n                return heroAction.value;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private hero_move_one_grid_action(hero: FightHeroItemData): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        const currentMapItem = fightTempData.get_fight_map_item(hero.grid_position.x, hero.grid_position.y);\r\n\r\n        if (currentMapItem && currentMapItem.data) {\r\n            currentMapItem.pick_up_prop();\r\n            const fightMapItem = currentMapItem.data.add_hero_index(hero.array_index);\r\n            hero.offset = fightMapItem.offset;\r\n        }\r\n\r\n        if (hero.find_path_target instanceof FightPropItemData) {\r\n            if (hero.move_path.length == 0) hero.fight_state = HeroFightState.WAITING;\r\n        } else {\r\n            let targetMapItem = fightTempData.get_fight_map_item(hero.find_path_target.grid_position.x, hero.find_path_target.grid_position.y);\r\n            if (targetMapItem && targetMapItem.node.position.sub(currentMapItem.node.position).mag() <= hero.attack_range) {\r\n                hero.fight_state = HeroFightState.ATTACKING;\r\n                hero.move_path = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    private hero_attack_hit(attacker: FightHeroItemData, angle: number, target: FightHeroItemData | FightBuildingItemData | FightWallItemData | FightPropItemData): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        let targetObject: FightHeroItem | FightBuildingItem | FightWallItem;\r\n        if (target instanceof FightHeroItemData) {\r\n            if (target.type == HeroType.ATTACK) {\r\n                targetObject = fightTempData.hero_item_array[target.array_index];\r\n            } else if (target.type == HeroType.DEFENSE) {\r\n                targetObject = fightTempData.defense_hero_array[target.array_index];\r\n            }\r\n        } else if (target instanceof FightBuildingItemData) {\r\n            targetObject = fightTempData.building_item_array[target.array_index];\r\n            if (!target.lock_attack_target) target.lock_attack_target = attacker;\r\n        } else if (target instanceof FightWallItemData) {\r\n            targetObject = fightTempData.wall_item_array[target.array_index];\r\n            if (!target.lock_attack_target) target.lock_attack_target = attacker;\r\n        }\r\n        if (targetObject) {\r\n            targetObject.change_hp(-attacker.real_attack_value);\r\n            let hitAnimation = \"hit\";\r\n            const heroConfig = gm.config.get_row_data(\"HeroConfigData\", `${attacker.id}`) as HeroConfig;\r\n            if (heroConfig && heroConfig.hit_name) {\r\n                hitAnimation = heroConfig.hit_name;\r\n            }\r\n            targetObject.play_hit_anim(targetObject.node, hitAnimation);\r\n\r\n            if (target.hp <= 0) {\r\n                if (target instanceof FightBuildingItemData) {\r\n                    if (fightTempData.is_main_city(target.id)) {\r\n                        for (let i = 0; i < fightTempData.building_data_array.length; i++) {\r\n                            if (fightTempData.building_data_array[i] != target) {\r\n                                const buildingItem = fightTempData.building_item_array[i];\r\n                                if (buildingItem) buildingItem.put_to_pool();\r\n                            }\r\n                        }\r\n                        this.fight_success();\r\n                    }\r\n                    fightTempData.grid.setWalkable(target.grid_position.x, target.grid_position.y, true);\r\n                } else if (target instanceof FightWallItemData) {\r\n                    fightTempData.grid.setWalkable(target.grid_position.x, target.grid_position.y, true);\r\n                }\r\n                targetObject.put_to_pool();\r\n                attacker.find_path_target = null;\r\n                attacker.move_path = [];\r\n                attacker.fight_state = HeroFightState.WAITING;\r\n            }\r\n        }\r\n    }\r\n\r\n    private hero_skill_hit(attacker: FightHeroItemData, target: FightPropItemData | FightHeroItemData | FightBuildingItemData | FightWallItemData, skill: SkillConfig, callback: Function): void {\r\n        const fightData = gm.data.fight_temp_data;\r\n        let targetHero: FightHeroItem | FightBuildingItem | FightWallItem;\r\n        if (target instanceof FightHeroItemData) {\r\n            if (target.type == HeroType.ATTACK) {\r\n                targetHero = fightData.hero_item_array[target.array_index] as FightHeroItem;\r\n            } else if (target.type == HeroType.DEFENSE) {\r\n                targetHero = fightData.defense_hero_array[target.array_index] as FightHeroItem;\r\n            }\r\n        } else if (target instanceof FightBuildingItemData) {\r\n            targetHero = fightData.building_item_array[target.array_index];\r\n            if (!target.lock_attack_target) {\r\n                target.lock_attack_target = attacker;\r\n            }\r\n        } else if (target instanceof FightWallItemData) {\r\n            targetHero = fightData.wall_item_array[target.array_index];\r\n            if (!target.lock_attack_target) {\r\n                target.lock_attack_target = attacker;\r\n            }\r\n        }\r\n        if (targetHero && targetHero.data) {\r\n            targetHero.change_hp(-attacker.real_attack_value * skill.damage_ratio);\r\n            if (skill.hit_name != \"\") {\r\n                if (skill.skill_pos == SkillPos.ONE_CIRCLE_GRID || skill.skill_pos == SkillPos.TWO_CIRCLE_GRID) {\r\n                    let gridPosition = targetHero.data.grid_position;\r\n                    let range = 0;\r\n                    if (skill.skill_pos == SkillPos.ONE_CIRCLE_GRID) {\r\n                        range = 1;\r\n                    } else if (skill.skill_pos == SkillPos.TWO_CIRCLE_GRID) {\r\n                        range = 2;\r\n                    }\r\n                    for (let x = gridPosition.x - range; x <= gridPosition.x + range; x++) {\r\n                        for (let y = gridPosition.y - range; y <= gridPosition.y + range; y++) {\r\n                            let mapItem = fightData.get_fight_map_item(x, y);\r\n                            if (mapItem && mapItem.data) {\r\n                                targetHero.play_skill_hit_anim(\r\n                                    mapItem.land_node,\r\n                                    skill.hit_name,\r\n                                    gm.ui.fight.map_node,\r\n                                    fightData.get_dynamic_node_layer(mapItem.data.grid_index, FightDynamicNodeLayer.FIRE_EFFECT)\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    targetHero.play_skill_hit_anim(targetHero.node, skill.hit_name);\r\n                }\r\n            }\r\n            this.scheduleOnce(() => {\r\n                callback();\r\n            }, 0.3);\r\n            if (target.hp <= 0) {\r\n                if (target instanceof FightBuildingItemData) {\r\n                    if (fightData.is_main_city(target.id)) {\r\n                        for (let i = 0; i < fightData.building_data_array.length; i++) {\r\n                            if (fightData.building_data_array[i] != target) {\r\n                                let building = fightData.building_item_array[i];\r\n                                if (building) building.put_to_pool();\r\n                            }\r\n                        }\r\n                        this.fight_success();\r\n                    }\r\n                    fightData.grid.setWalkable(target.grid_position.x, target.grid_position.y, true);\r\n                } else if (target instanceof FightWallItemData) {\r\n                    fightData.grid.setWalkable(target.grid_position.x, target.grid_position.y, true);\r\n                }\r\n\r\n                targetHero.put_to_pool();\r\n                attacker.find_path_target = null;\r\n                attacker.move_path = [];\r\n                attacker.fight_state = HeroFightState.WAITING;\r\n            }\r\n        }\r\n    }\r\n\r\n    private defense_hero_skill_hit(attacker: FightHeroItemData, defender: FightHeroItemData, skill: SkillConfig, callback: Function): void {\r\n        let targetHero: FightHeroItem;\r\n        const fightData = gm.data.fight_temp_data;\r\n        if (defender instanceof FightHeroItemData) {\r\n            targetHero = fightData.hero_item_array[defender.array_index];\r\n        }\r\n\r\n        if (targetHero && targetHero.data) {\r\n            targetHero.change_hp(-attacker.real_attack_value * skill.damage_ratio);\r\n            if (skill.hit_name != \"\") {\r\n                if (skill.skill_pos == SkillPos.ONE_CIRCLE_GRID || skill.skill_pos == SkillPos.TWO_CIRCLE_GRID) {\r\n                    const gridPosition = targetHero.data.grid_position;\r\n                    let range = 0;\r\n                    if (skill.skill_pos == SkillPos.ONE_CIRCLE_GRID) {\r\n                        range = 1;\r\n                    } else if (skill.skill_pos == SkillPos.TWO_CIRCLE_GRID) {\r\n                        range = 2;\r\n                    }\r\n                    for (let x = gridPosition.x - range; x <= gridPosition.x + range; x++) {\r\n                        for (let y = gridPosition.y - range; y <= gridPosition.y + range; y++) {\r\n                            const mapItem = fightData.get_fight_map_item(x, y);\r\n                            if (mapItem && mapItem.data) {\r\n                                targetHero.play_skill_hit_anim(\r\n                                    mapItem.land_node,\r\n                                    skill.hit_name,\r\n                                    gm.ui.fight.map_node,\r\n                                    fightData.get_dynamic_node_layer(mapItem.data.grid_index, FightDynamicNodeLayer.FIRE_EFFECT)\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    targetHero.play_skill_hit_anim(targetHero.node, skill.hit_name);\r\n                }\r\n            }\r\n            if (defender.find_path_target instanceof FightBuildingItemData) {\r\n                const building = defender.find_path_target;\r\n                if (building.hp / building.max_hp >= 0.45) {\r\n                    if (this.find_next_path_distance(defender.grid_position, attacker.grid_position) != Number.MAX_SAFE_INTEGER) {\r\n                        this.find_next_path(defender, attacker);\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.scheduleOnce(() => {\r\n                callback();\r\n            }, 0.3);\r\n\r\n            if (defender.hp <= 0) {\r\n                targetHero.put_to_pool();\r\n                fightData.death_hero_count++;\r\n                attacker.move_path = [];\r\n                attacker.find_path_target = null;\r\n                attacker.fight_state = HeroFightState.WAITING;\r\n\r\n                if (fightData.death_hero_count >= fightData.hero_data_array.length) {\r\n                    this.fight_revive(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private common_hero_skill_hit_buff(skill: SkillConfig, caster: FightHeroItem, target: FightHeroItem, position: cc.Vec2): void {\r\n        const fightData = gm.data.fight_temp_data;\r\n        const affectedUnits: FightHeroItem[] = [];\r\n        if (skill.skill_pos == SkillPos.ENEMY_BODY && target) {\r\n            affectedUnits.push(target);\r\n        } else if (skill.skill_pos == SkillPos.ALL_ENEMY_BODY) {\r\n            for (let i = 0; i < fightData.defense_hero_array.length; i++) {\r\n                const enemyHero = fightData.defense_hero_array[i];\r\n                if (enemyHero) affectedUnits.push(enemyHero);\r\n            }\r\n        } else if (skill.skill_pos == SkillPos.SELF_BODY) {\r\n            affectedUnits.push(caster);\r\n        } else if (skill.skill_pos == SkillPos.ALL_SELF_BODY) {\r\n            for (let i = 0; i < fightData.hero_item_array.length; i++) {\r\n                const allyHero = fightData.hero_item_array[i];\r\n                if (allyHero && allyHero.data && allyHero.data.hp > 0 && allyHero.data.in_battle_state == HeroInBattleState.HAS_IN_BATTLE) {\r\n                    affectedUnits.push(allyHero);\r\n                }\r\n            }\r\n        } else if ((skill.skill_pos == SkillPos.ONE_CIRCLE_GRID || skill.skill_pos == SkillPos.TWO_CIRCLE_GRID) && position) {\r\n            if (!caster.data) return;\r\n            const potentialTargets = caster.data.type == HeroType.ATTACK ? fightData.defense_hero_array : fightData.hero_item_array;\r\n            const range = skill.skill_pos == SkillPos.ONE_CIRCLE_GRID ? 1 : 2;\r\n            for (let i = 0; i < potentialTargets.length; i++) {\r\n                const nearbyHero = potentialTargets[i];\r\n                if (nearbyHero && nearbyHero.data) {\r\n                    const { x, y } = nearbyHero.data.grid_position;\r\n                    if (x >= position.x - range && x <= position.x + range && y >= position.y - range && y <= position.y + range) {\r\n                        affectedUnits.push(nearbyHero);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < skill.effect_array.length; i++) {\r\n            const effect = skill.effect_array[i];\r\n            if (Math.random() < effect.trigger_ratio) {\r\n                const buff = new BuffItemData();\r\n                buff.id = effect.skill_effect_id;\r\n                switch (buff.id) {\r\n                    case SkillEffectId.REDUCE_DAMAGE:\r\n                        buff.reduce_damage_ratio = effect.value;\r\n                        buff.max_trigger_count = 1;\r\n                        buff.is_start = true;\r\n                        buff.is_end = false;\r\n                        break;\r\n                    case SkillEffectId.ATTACK_SPEED_UP:\r\n                        buff.attack_speed_ratio = effect.value;\r\n                        buff.max_trigger_count = 1;\r\n                        buff.is_start = true;\r\n                        buff.is_end = false;\r\n                        break;\r\n                    case SkillEffectId.ATTACK_BONUS:\r\n                        buff.attack_bonus_ratio = effect.value;\r\n                        buff.max_trigger_count = 1;\r\n                        buff.is_start = true;\r\n                        buff.is_end = false;\r\n                        break;\r\n                    case SkillEffectId.DIZZINESS:\r\n                        buff.damage_value = 0;\r\n                        buff.move_speed_scale = effect.value;\r\n                        buff.max_trigger_count = 1;\r\n                        buff.is_start = true;\r\n                        buff.is_end = false;\r\n                        break;\r\n                    case SkillEffectId.DEFENSE_BONUS:\r\n                        buff.defense_bonus_ratio = effect.value;\r\n                        buff.max_trigger_count = 1;\r\n                        buff.is_start = true;\r\n                        buff.is_end = false;\r\n                        break;\r\n                    case SkillEffectId.RESTORE_HP:\r\n                        buff.restore_hp_ratio = effect.value;\r\n                        buff.max_trigger_count = Math.ceil(effect.duration);\r\n                        buff.is_start = true;\r\n                        buff.is_end = false;\r\n                        break;\r\n                    case SkillEffectId.FIRE:\r\n                        buff.max_trigger_count = Math.ceil(effect.duration);\r\n                        if (caster.data) {\r\n                            buff.damage_value = Math.ceil((effect.value * caster.data.real_attack_value) / buff.max_trigger_count);\r\n                        }\r\n                        buff.is_start = false;\r\n                        buff.is_end = true;\r\n                        break;\r\n                    case SkillEffectId.REDUCE_SPEED:\r\n                        buff.damage_value = 0;\r\n                        buff.move_speed_scale = Math.max(0, 1 - effect.value);\r\n                        buff.max_trigger_count = 1;\r\n                        buff.is_start = true;\r\n                        buff.is_end = false;\r\n                        break;\r\n                    default:\r\n                        cc.error(\"Unknown buff ID\");\r\n                }\r\n                buff.start_time = fightData.total_time;\r\n                buff.valid_time = effect.duration;\r\n                buff.trigger_count = 0;\r\n                buff.value = effect.value;\r\n\r\n                for (let k = 0; k < affectedUnits.length; k++) {\r\n                    affectedUnits[k].add_buff_data(buff);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private processHeroAction(heroIndex: number): string | { value: any } {\r\n        const fightData = gm.data.fight_temp_data;\r\n        const defenseHero = fightData.defense_hero_array[heroIndex];\r\n\r\n        if (null == defenseHero) {\r\n            return \"continue\";\r\n        }\r\n\r\n        const defenseData = fightData.defense_hero_data_array[heroIndex];\r\n        if (defenseData.fight_state == HeroFightState.WAITING) {\r\n            this.find_next_path(defenseData);\r\n\r\n        } else if (defenseData.fight_state == HeroFightState.MOVING) {\r\n            if (defenseData.move_path.length <= 0) {\r\n                this.defense_hero_move_one_grid_action(defenseData);\r\n            } else {\r\n                const nextPosition = defenseData.move_path[0];\r\n                const targetPosition = fightData.grid_position_to_position(cc.v2(nextPosition.x, nextPosition.y)).add(defenseData.offset);\r\n                const movementVector = targetPosition.sub(defenseHero.node.position);\r\n                const distanceToTarget = movementVector.mag();\r\n                const moveDistance = fightData.delta_time * defenseData.real_move_speed;\r\n                const angle = Math.atan2(movementVector.y, movementVector.x);\r\n\r\n                if (0 < distanceToTarget && moveDistance < distanceToTarget) {\r\n                    defenseHero.node.position = defenseHero.node.position.add(cc.v3(Math.cos(angle), Math.sin(angle)).mul(moveDistance));\r\n                } else {\r\n                    defenseHero.node.position = targetPosition;\r\n                    defenseData.move_path.shift();\r\n\r\n                    const gridItem = fightData.get_fight_map_item(defenseData.grid_position.x, defenseData.grid_position.y);\r\n                    if (gridItem && gridItem.data) {\r\n                        gridItem.data.remove_defense_hero_index(defenseData.array_index);\r\n                    }\r\n\r\n                    defenseData.grid_index = nextPosition.x + nextPosition.y * fightData.map_size.x;\r\n                    defenseData.grid_position.x = nextPosition.x;\r\n                    defenseData.grid_position.y = nextPosition.y;\r\n                    defenseHero.node.zIndex = gm.data.fight_temp_data.get_dynamic_node_layer(defenseData.grid_index, FightDynamicNodeLayer.MOVE);\r\n                    this.defense_hero_move_one_grid_action(defenseData);\r\n                }\r\n                defenseHero.play_spine_anim(defenseData.move_path.length <= 0 ? \"stay\" : \"move\", angle);\r\n            }\r\n\r\n        } else if (defenseData.fight_state == HeroFightState.ATTACKING) {\r\n            const target = defenseData.find_path_target as FightHeroItemData;\r\n            if (target) {\r\n                const targetHero = fightData.hero_item_array[target.array_index];\r\n                if (targetHero && targetHero.node) {\r\n                    const attackerPosition = fightData.get_fight_map_item(defenseData.grid_position.x, defenseData.grid_position.y);\r\n                    const targetPosition = fightData.get_fight_map_item(target.grid_position.x, target.grid_position.y);\r\n                    if (attackerPosition && targetPosition && targetPosition.node.position.sub(attackerPosition.node.position).mag() > defenseData.attack_range) {\r\n                        defenseData.find_path_target = null;\r\n                        defenseData.move_path = [];\r\n                        defenseData.fight_state = HeroFightState.WAITING;\r\n                        return {\r\n                            value: undefined\r\n                        };\r\n                    }\r\n\r\n                    if (0 < defenseData.attack_value && 0 < target.hp) {\r\n                        if (0 == defenseData.last_attack_time || fightData.total_time - defenseData.last_attack_time > defenseData.real_attack_interval) {\r\n                            defenseData.last_attack_time = fightData.total_time;\r\n                            defenseData.attack_count++;\r\n                            const targetGridPosition = target.grid_position;\r\n                            const targetWorldPosition = fightData.grid_position_to_position(cc.v2(targetGridPosition.x, targetGridPosition.y));\r\n                            const directionVector = targetWorldPosition.sub(defenseHero.node.position);\r\n                            const attackAngle = Math.atan2(directionVector.y, directionVector.x);\r\n\r\n                            if (targetHero) {\r\n                                const heroNode = targetHero.node;\r\n                                if (defenseData.attack_count % (FightConstants.SKILL_INTERVAL_NORMAL_ATTACK_COUNT + 1) == 0 && (gm.data.fight_temp_data.is_debug || 0 < defenseData.skill_lv && 0 < defenseData.skill_id)) {\r\n                                    const skillConfig = gm.config.get_row_data(\"SkillConfigData\", defenseData.skill_id + \"\", defenseData.skill_lv + \"\") as SkillConfig;\r\n                                    if (!skillConfig) {\r\n                                        return {\r\n                                            value: undefined\r\n                                        };\r\n                                    }\r\n\r\n                                    defenseHero.play_skill_audio();\r\n                                    defenseHero.play_spine_anim(\"skill\", attackAngle, false, skillConfig.fire_time, () => {\r\n                                        if (\"\" != skillConfig.skill_name) {\r\n                                            if (skillConfig.skill_pos == SkillPos.ENEMY_BODY || skillConfig.skill_pos == SkillPos.ALL_ENEMY_BODY) {\r\n                                                if (skillConfig.skill_type == SkillType.FLY) {\r\n                                                    defenseHero.play_skill_fly_anim(skillConfig, heroNode, attackAngle, () => {\r\n                                                        this.defense_hero_skill_hit(defenseData, target, skillConfig, () => {\r\n                                                            const heroItem = fightData.hero_item_array[target.array_index];\r\n                                                            if (target instanceof FightHeroItemData && heroItem && heroItem.data) {\r\n                                                                this.common_hero_skill_hit_buff(skillConfig, defenseHero, heroItem, heroItem.data.grid_position);\r\n                                                            }\r\n                                                        });\r\n                                                    });\r\n                                                } else {\r\n                                                    this.defense_hero_skill_hit(defenseData, target, skillConfig, () => {\r\n                                                        const heroItem = fightData.hero_item_array[target.array_index];\r\n                                                        if (target instanceof FightHeroItemData && heroItem && heroItem.data) {\r\n                                                            this.common_hero_skill_hit_buff(skillConfig, defenseHero, heroItem, heroItem.data.grid_position);\r\n                                                        }\r\n                                                    })\r\n                                                }\r\n                                            } else {\r\n                                                if (!(skillConfig.skill_pos != SkillPos.SELF_BODY && skillConfig.skill_pos != SkillPos.ALL_SELF_BODY)) { ///can than\r\n                                                    defenseHero.play_skill_anim(skillConfig, heroNode, attackAngle, () => {\r\n                                                        const heroItem = fightData.hero_item_array[target.array_index];\r\n                                                        if (target instanceof FightHeroItemData && heroItem && heroItem.data) {\r\n                                                            this.common_hero_skill_hit_buff(skillConfig, defenseHero, heroItem, heroItem.data.grid_position);\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        } else if (\"\" != skillConfig.hit_name) {\r\n                                            if (skillConfig.skill_pos == SkillPos.ENEMY_BODY || skillConfig.skill_pos == SkillPos.ALL_ENEMY_BODY) {\r\n                                                this.defense_hero_skill_hit(defenseData, target, skillConfig, () => {\r\n                                                    const heroItem = fightData.hero_item_array[target.array_index];\r\n                                                    if (target instanceof FightHeroItemData && heroItem && heroItem.data) {\r\n                                                        this.common_hero_skill_hit_buff(skillConfig, defenseHero, heroItem, heroItem.data.grid_position);\r\n                                                    }\r\n                                                });\r\n                                            } else if (skillConfig.skill_pos == SkillPos.SELF_BODY || skillConfig.skill_pos == SkillPos.ALL_SELF_BODY) {\r\n                                                this.defense_hero_skill_hit(defenseData, defenseData, skillConfig, () => {\r\n                                                    defenseHero.data && this.common_hero_skill_hit_buff(skillConfig, defenseHero, defenseHero, defenseHero.data.grid_position)\r\n                                                });\r\n\r\n                                                if (skillConfig.skill_pos == SkillPos.ALL_SELF_BODY) {\r\n                                                    for (let index = 0; index < fightData.defense_hero_array.length; index++) {\r\n                                                        ((index) => {\r\n                                                            const defenseHero = fightData.defense_hero_array[index];\r\n                                                            const defenseHeroData = fightData.defense_hero_data_array[index]\r\n                                                            if (defenseHeroData && defenseHeroData != defenseData) {\r\n                                                                this.hero_skill_hit(defenseHeroData, defenseHeroData, skillConfig, () => {\r\n                                                                    if (defenseHero.data) {\r\n                                                                        this.common_hero_skill_hit_buff(skillConfig, defenseHero, defenseHero, defenseHero.data.grid_position);\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                        })(index)\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            const heroItem = fightData.hero_item_array[target.array_index];\r\n                                            if (target instanceof FightHeroItemData) {\r\n                                                heroItem && heroItem.data && this.common_hero_skill_hit_buff(skillConfig, defenseHero, heroItem, heroItem.data.grid_position);\r\n                                            } else {\r\n                                                this.common_hero_skill_hit_buff(skillConfig, defenseHero, null, null);\r\n                                            }\r\n                                        }\r\n                                    }, skillConfig.prepare_skill_anim_time, () => {\r\n                                        targetHero.play_spine_anim(\"stay\", attackAngle);\r\n                                    });\r\n\r\n                                    if (skillConfig.prepare_skill_anim_time >= defenseData.real_attack_interval) {\r\n                                        // cc.error(\"英雄的攻击动画时间不能大于攻击间隔\");\r\n                                        cc.error(\"Thời gian hoạt ảnh tấn công của anh hùng không thể dài hơn khoảng thời gian tấn công.\");\r\n                                    }\r\n\r\n                                } else {\r\n                                    defenseHero.play_attack_audio();\r\n                                    defenseHero.play_spine_anim(\"attack\", attackAngle, false, defenseData.fly_weapon_time, () => {\r\n                                        if (defenseData.attack_type == AttackType.REMOTE) {\r\n                                            defenseHero.play_weapon_fly_anim(heroNode, attackAngle, () => {\r\n                                                this.defense_hero_attack_hit(defenseHero, defenseData, attackAngle, target as FightHeroItemData)\r\n                                            });\r\n                                        } else {\r\n                                            this.defense_hero_attack_hit(defenseHero, defenseData, attackAngle, target as FightHeroItemData);\r\n                                        }\r\n                                    }, defenseData.attack_anim_time, () => {\r\n                                        defenseHero.play_spine_anim(\"stay\", attackAngle);\r\n                                    });\r\n\r\n                                    if (defenseData.attack_anim_time >= defenseData.real_attack_interval) {\r\n                                        // cc.error(\"防守英雄的攻击动画时间不能大于攻击间隔\");\r\n                                        cc.error(\"Thời gian hoạt ảnh tấn công của anh hùng phòng thủ không thể dài hơn khoảng thời gian tấn công.\");\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return \"continue\"\r\n                    }\r\n                }\r\n            } else {\r\n                cc.error(\"defense_hero_data.find_path_target need != null\");\r\n            }\r\n            defenseData.move_path = [];\r\n            defenseData.find_path_target = null;\r\n            defenseData.fight_state = HeroFightState.WAITING;\r\n        }\r\n    }\r\n\r\n    private update_defense_hero_action(): any {\r\n        const defenseHeroArr = gm.data.fight_temp_data.defense_hero_array;\r\n        for (let index = 0; index < defenseHeroArr.length; index++) {\r\n            const heroAct = this.processHeroAction(index);\r\n            if (typeof heroAct === \"object\" && heroAct != undefined && \"value\" in heroAct) {\r\n                return heroAct.value;\r\n            }\r\n        }\r\n    }\r\n\r\n    private defense_hero_move_one_grid_action(heroData: FightHeroItemData) {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        const currentGridItem = fightTempData.get_fight_map_item(heroData.grid_position.x, heroData.grid_position.y);\r\n        if (currentGridItem && currentGridItem.data) {\r\n            const gridItemData = currentGridItem.data.add_defense_hero_index(heroData.array_index);\r\n            heroData.offset = gridItemData.offset;\r\n            const targetItem = heroData.find_path_target;\r\n            if (targetItem instanceof FightHeroItemData) {\r\n                const targetPosition = fightTempData.get_fight_map_item(targetItem.grid_position.x, targetItem.grid_position.y).node.position;\r\n                const distanceToTarget = targetPosition.sub(currentGridItem.node.position).mag();\r\n                if (distanceToTarget <= heroData.attack_range) {\r\n                    heroData.fight_state = HeroFightState.ATTACKING;\r\n                    heroData.move_path = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private defense_hero_attack_hit(attacker: FightHeroItem, attackData: FightHeroItemData, attackAngle: number, targetData: FightHeroItemData): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        const targetHero = fightTempData.hero_item_array[targetData.array_index];\r\n        if (targetHero) {\r\n            targetHero.change_hp(-attackData.real_attack_value);\r\n\r\n            if (targetData.find_path_target instanceof FightBuildingItemData &&\r\n                targetData.find_path_target.hp / targetData.find_path_target.max_hp >= 0.45 &&\r\n                this.find_next_path_distance(targetData.grid_position, attackData.grid_position) != Number.MAX_SAFE_INTEGER\r\n            ) {\r\n                this.find_next_path(targetData, attackData);\r\n            }\r\n\r\n            let hitAnimationName = \"hit\";\r\n            const heroConfigData = gm.config.get_row_data(\"HeroConfigData\", attackData.id.toString()) as HeroConfig;\r\n            if (heroConfigData && heroConfigData.hit_name) {\r\n                hitAnimationName = heroConfigData.hit_name;\r\n            }\r\n            targetHero.play_hit_anim(targetHero.node, hitAnimationName);\r\n\r\n            if (targetData.hp <= 0) {\r\n                attacker.play_spine_anim(\"stay\", attackAngle);\r\n                targetHero.put_to_pool();\r\n                fightTempData.death_hero_count++;\r\n                attackData.move_path = [];\r\n                attackData.find_path_target = null;\r\n                attackData.fight_state = HeroFightState.WAITING;\r\n\r\n                if (fightTempData.death_hero_count >= fightTempData.hero_data_array.length) {\r\n                    this.fight_revive(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private update_building_action(): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        for (let index = 0; index < fightTempData.building_data_array.length; index++) {\r\n            const buildingItem = fightTempData.building_item_array[index];\r\n            const buildingData = fightTempData.building_data_array[index];\r\n\r\n            if (buildingItem && buildingData && buildingData.attack_value > 0) {\r\n                let target: FightHeroItemData | null = buildingData.lock_attack_target;\r\n\r\n                if (target) {\r\n                    const targetHero = fightTempData.hero_item_array[target.array_index];\r\n\r\n                    if (targetHero) {\r\n                        const targetGridPosition = fightTempData.grid_position_to_position(cc.v2(target.grid_position.x, target.grid_position.y));\r\n                        const buildingGridPosition = fightTempData.grid_position_to_position(cc.v2(buildingData.grid_position.x, buildingData.grid_position.y));\r\n                        const directionVector = targetGridPosition.sub(buildingGridPosition);\r\n                        const attackAngle = Math.atan2(directionVector.y, directionVector.x);\r\n\r\n                        if (directionVector.mag() < buildingData.attack_range && target.hp > 0) {\r\n                            if (buildingData.last_attack_time == 0 || fightTempData.total_time - buildingData.last_attack_time > buildingData.attack_interval) {\r\n                                if (buildingData.attack_type == AttackType.REMOTE) {\r\n                                    buildingItem.play_weapon_fly_anim(targetHero.node, attackAngle, () => {\r\n                                        this.building_attack_hit(buildingData, target);\r\n                                    });\r\n                                }\r\n                                buildingData.last_attack_time = fightTempData.total_time;\r\n                            }\r\n                        } else {\r\n                            buildingData.lock_attack_target = this.find_building_attack_target(buildingData);\r\n                        }\r\n                    } else {\r\n                        buildingData.lock_attack_target = this.find_building_attack_target(buildingData);\r\n                    }\r\n                } else {\r\n                    buildingData.lock_attack_target = this.find_building_attack_target(buildingData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private building_attack_hit(buildingData: FightBuildingItemData, targetHeroData: FightHeroItemData): void {\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n        const targetHeroItem = fightTempData.hero_item_array[targetHeroData.array_index];\r\n        if (!targetHeroItem) return;\r\n        targetHeroItem.change_hp(-buildingData.attack_value);\r\n        targetHeroItem.play_hit_anim(targetHeroItem.node);\r\n\r\n        if (targetHeroData.hp <= 0) {\r\n            targetHeroItem.put_to_pool();\r\n            fightTempData.death_hero_count++;\r\n\r\n            if (fightTempData.death_hero_count >= fightTempData.hero_data_array.length) {\r\n                this.fight_revive(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private update_wall_action(): void {\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n        for (let i = 0; i < fightTempData.wall_data_array.length; i++) {\r\n            const wallItem = fightTempData.wall_item_array[i];\r\n            const wallData: FightWallItemData = fightTempData.wall_data_array[i]\r\n            if (wallItem && wallData && wallData.attack_value > 0) {\r\n                wallItem.data = wallData;\r\n\r\n                const attackTarget = wallData.lock_attack_target;\r\n                if (attackTarget) {\r\n                    const targetHeroItem = fightTempData.hero_item_array[attackTarget.array_index];\r\n                    if (targetHeroItem) {\r\n                        const targetPos = fightTempData.grid_position_to_position(cc.v2(attackTarget.grid_position.x, attackTarget.grid_position.y));\r\n                        const wallPos = wallItem.node.position;\r\n                        const directionVector = targetPos.sub(wallPos);\r\n                        const angle = Math.atan2(directionVector.y, directionVector.x);\r\n\r\n                        if (directionVector.mag() < wallData.attack_range && attackTarget.hp > 0) {\r\n                            if (wallData.last_attack_time == 0 || (fightTempData.total_time - wallData.last_attack_time > wallData.attack_interval)) {\r\n                                wallData.last_attack_time = fightTempData.total_time;\r\n                                wallItem.play_attack_audio();\r\n                                wallItem.play_spine_anim(angle, wallData.fly_weapon_time, () => {\r\n                                    if (wallData.attack_type == AttackType.REMOTE) {\r\n                                        wallItem.play_weapon_fly_anim(targetHeroItem.node, angle, () => {\r\n                                            this.wall_attack_hit(wallData, attackTarget);\r\n                                        });\r\n                                    } else {\r\n                                        this.wall_attack_hit(wallData, attackTarget);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else {\r\n                            wallData.lock_attack_target = this.find_building_attack_target(wallData);\r\n                        }\r\n                    }\r\n                } else {\r\n                    wallData.lock_attack_target = this.find_building_attack_target(wallData);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private wall_attack_hit(wallData: FightWallItemData, targetHeroData: FightHeroItemData): void {\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n        const targetHero = fightTempData.hero_item_array[targetHeroData.array_index];\r\n\r\n        if (targetHero) {\r\n            const skillConfig = gm.config.get_row_data(\"SkillConfigData\", `${wallData.skill_id}`, `${wallData.skill_lv}`) as SkillConfig;\r\n            this.common_hero_skill_hit_buff(skillConfig, null, targetHero, targetHero.data.grid_position);\r\n\r\n            targetHero.change_hp(-wallData.real_attack_value);\r\n\r\n            let hitAnimation = \"hit\";\r\n            const heroConfig = gm.config.get_row_data(\"HeroConfigData\", `${wallData.id}`) as HeroConfig;\r\n            if (heroConfig && heroConfig.hit_name != \"\") {\r\n                hitAnimation = heroConfig.hit_name;\r\n            }\r\n\r\n            targetHero.play_hit_anim(targetHero.node, hitAnimation);\r\n\r\n            if (targetHeroData.hp <= 0) {\r\n                targetHero.put_to_pool();\r\n                fightTempData.death_hero_count++;\r\n\r\n                if (fightTempData.death_hero_count >= fightTempData.hero_data_array.length) {\r\n                    this.fight_revive(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private update_buff_action(): void {\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n\r\n        for (let i = 0; i < fightTempData.hero_item_array.length; i++) {\r\n            const hero = fightTempData.hero_item_array[i];\r\n            if (hero) {\r\n                hero.check_hero_buff(fightTempData.total_time);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < fightTempData.defense_hero_array.length; i++) {\r\n            const defenseHero = fightTempData.defense_hero_array[i];\r\n            if (defenseHero) {\r\n                defenseHero.check_hero_buff(fightTempData.total_time);\r\n            }\r\n        }\r\n    }\r\n\r\n    private update_view(): void {\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n        const fightData: FightData = gm.data.fight_data;\r\n        const mapCellData = gm.data.mapCell_data;\r\n\r\n        this.name_lbl.string = fightTempData.name;\r\n\r\n        this.hero_list.setData(fightTempData.hero_data_array);\r\n\r\n        this.speed_1_btn.node.active = fightData.speed_scale == gm.const.FIGHT_SPEED_X1 && !mapCellData.isGuide;\r\n        this.speed_2_btn.node.active = fightData.speed_scale == gm.const.FIGHT_SPEED_X2 && !mapCellData.isGuide;\r\n\r\n        this.left_sec_lbl.string = Utils.time_format(fightTempData.left_fight_time, \"mm:ss\");\r\n\r\n        const shouldShowReturnBtn = !mapCellData.isGuide && fightTempData.show_return_btn_timestamp > 0 && Date.now() > fightTempData.show_return_btn_timestamp;\r\n        this.return_btn.node.active = shouldShowReturnBtn;\r\n    }\r\n\r\n    private fight_start(): void {\r\n        const fightData: FightData = gm.data.fight_data;\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n\r\n        fightData.fight_count++;\r\n        fightData.async_write_data();\r\n\r\n        const heroData = fightTempData.hero_data_array[0];\r\n        heroData.in_battle_state = HeroInBattleState.WILL_IN_BATTLE;\r\n        fightTempData.in_battle_hero_data = heroData;\r\n\r\n        gm.data.event_emitter.emit(\"fight_in_battle\", heroData);\r\n\r\n        this.reward_list.setData(fightTempData.reward_data_array);\r\n\r\n        this.scheduleOnce(() => {\r\n            cc.director.getScheduler().setTimeScale(fightData.speed_scale);\r\n            gm.audio.play_effect(gm.const.AUDIO_18_FIGHT_TIME);\r\n\r\n            switch (fightTempData.play_type) {\r\n                case 0:\r\n                    gm.audio.play_music(gm.const.AUDIO_93_FIGHT_MUSIC);\r\n                    break;\r\n                case 1:\r\n                    gm.audio.play_music(gm.const.AUDIO_96_ISLAND_MUSIC);\r\n                    break;\r\n                case 2:\r\n                    gm.audio.play_music(gm.const.AUDIO_95_CAVES_MUSIC);\r\n                    break;\r\n            }\r\n\r\n            if (fightTempData.play_type == 0 || fightTempData.play_type == 1) {\r\n                this.boat_node.active = true;\r\n                this.boat_node.position = fightTempData.boat_start_position;\r\n                Utils.async_set_sprite_frame(this.boat_spr, BundleName.MAP, \"res/build/\" + fightTempData.boat_id);\r\n                this.boat_anim.once(cc.Animation.EventType.FINISHED, () => {\r\n                    this.boat_anim.play(\"ship_normal\");\r\n                    fightTempData.fight_state = FightState.RUN;\r\n                    this.apply_passive_skill_effect();\r\n                });\r\n                this.boat_anim.play(\"ship_in\");\r\n            } else {\r\n                this.boat_node.active = false;\r\n                fightTempData.fight_state = FightState.RUN;\r\n                this.apply_passive_skill_effect();\r\n            }\r\n\r\n            if (gm.data.record_data.record_state != 1) {\r\n                gm.channel.record_start();\r\n                gm.data.record_data.record_state = 1;\r\n                gm.data.record_data.record_type = 0;\r\n                gm.data.record_data.record_timestamp = Date.now();\r\n                gm.data.event_emitter.emit(RecordData.RECORD_STATE_CHANGE);\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    private fight_success(): void {\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n        if (fightTempData.play_type <= 1) {\r\n            gm.data.ladder_data.fail_count = 0;\r\n            gm.data.ladder_data.async_write_data();\r\n        } else if (fightTempData.play_type == 2) {\r\n            gm.channel.report_event(\"cave_layer\", {\r\n                event_desc: cc.js.formatStr(\"洞窟过关%d层人数\", gm.data.fight_data.caves_layer),\r\n                desc: cc.js.formatStr(\"洞窟通关第%d层人数\", gm.data.fight_data.caves_layer),\r\n                layer: gm.data.fight_data.caves_layer\r\n            });\r\n            gm.data.fight_data.caves_layer++;\r\n            gm.data.fight_data.async_write_data();\r\n        }\r\n\r\n        fightTempData.fight_state = FightState.SUCCESS;\r\n        const timeScaleSuffix = cc.director.getScheduler().getTimeScale() == gm.const.FIGHT_SPEED_X2 ? \"_x2\" : \"\";\r\n        for (let i = fightTempData.hero_item_array.length - 1; i >= 0; i--) {\r\n            const heroItem = fightTempData.hero_item_array[i];\r\n            if (heroItem && heroItem.data && heroItem.data.id > 0) {\r\n                const heroConfig = gm.config.get_row_data(\"HeroConfigData\", heroItem.data.id.toString()) as HeroConfig;\r\n                if (heroConfig?.success_audio) {\r\n                    gm.audio.play_effect(heroConfig.success_audio + timeScaleSuffix);\r\n                }\r\n            }\r\n        }\r\n\r\n        gm.audio.play_effect(gm.const.AUDIO_21_FIGHT_SUCCESS);\r\n        cc.director.getScheduler().setTimeScale(gm.const.FIGHT_SPEED_X1);\r\n\r\n        this.update_view();\r\n\r\n        this.scheduleOnce(() => {\r\n            fightTempData.hero_item_array.forEach((heroItem, index) => {\r\n                this.scheduleOnce(() => {\r\n                    this.hero_jump_to_boat(heroItem);\r\n                }, 0.05 * index);\r\n            });\r\n        }, 0.5);\r\n\r\n        this.scheduleOnce(() => {\r\n            fightTempData.build_fight_result_data();\r\n            this.fight_clear();\r\n\r\n            if (gm.data.fight_temp_data.play_type == 0) {\r\n                gm.channel.report_event(\"fight\", {\r\n                    event_desc: \"突袭\",\r\n                    desc: \"成功\"\r\n                });\r\n                ReportData.instance.report_once_point(10823);\r\n                ReportData.instance.report_point(10824);\r\n            } else if (gm.data.fight_temp_data.play_type == 2) {\r\n                gm.channel.report_event(\"attack_caves\", {\r\n                    event_desc: \"攻打洞窟\",\r\n                    layer: gm.data.fight_data.caves_layer,\r\n                    desc: cc.js.formatStr(\"通关洞窟%d层\", gm.data.fight_data.caves_layer)\r\n                });\r\n                ReportData.instance.report_once_point(10900 + gm.data.fight_data.caves_layer);\r\n            }\r\n\r\n            // Nếu đang hướng dẫn, gửi sự kiện báo cáo hướng dẫn\r\n            if (gm.data.mapCell_data.isGuide) {\r\n                gm.channel.report_event(\"ohayoo_game_guide\", {\r\n                    guideid: 16,\r\n                    guidedesc: cc.js.formatStr(\"16.进入战斗结算界面\")\r\n                });\r\n            }\r\n\r\n            gm.ui.show_panel(gm.const.FightResult);\r\n        }, 2);\r\n    }\r\n\r\n    private fight_revive(isRevive: boolean): void {\r\n        const fightTempData: FightTempData = gm.data.fight_temp_data;\r\n        if (!isRevive) {\r\n            gm.data.fight_temp_data.fight_state = FightState.REVIVE;\r\n            gm.ui.set_module_args(gm.const.FightReviveHero.key, {\r\n                callback: (choice: number) => {\r\n                    if (choice == 0) {\r\n                        for (let i = fightTempData.hero_item_array.length - 1; i >= 0; i--) {\r\n                            const heroItem = fightTempData.hero_item_array.pop();\r\n                            if (heroItem) {\r\n                                heroItem.reset();\r\n                                gm.pool.put(heroItem.node);\r\n                            }\r\n                        }\r\n\r\n                        for (let i = fightTempData.reward_data_array.length - 1; i >= 0; i--) {\r\n                            const reward = fightTempData.reward_data_array[i];\r\n                            if (reward.id > 22000 && reward.id < 23000) {\r\n                                fightTempData.reward_data_array.splice(i, 1);\r\n                            }\r\n                        }\r\n\r\n                        fightTempData.goto_battle_count = 0;\r\n                        fightTempData.death_hero_count = 0;\r\n                        fightTempData.total_time = 0;\r\n                        fightTempData.hero_data_array = [];\r\n                        fightTempData.build_hero_array(true);\r\n\r\n                        const firstHero = fightTempData.hero_data_array[0];\r\n                        firstHero.in_battle_state = HeroInBattleState.WILL_IN_BATTLE;\r\n                        fightTempData.in_battle_hero_data = firstHero;\r\n                        gm.data.event_emitter.emit(\"fight_in_battle\", firstHero);\r\n\r\n                        for (let i = 0; i < fightTempData.map_item_data_array.length; i++) {\r\n                            const mapItem = fightTempData.map_item_data_array[i];\r\n                            if (mapItem) {\r\n                                mapItem.hero_index_array = [];\r\n                            }\r\n                        }\r\n\r\n                        for (let i = 0; i < fightTempData.map_item_array.length; i++) {\r\n                            const mapItem = fightTempData.map_item_array[i];\r\n                            if (mapItem && mapItem.data) {\r\n                                mapItem.update_view();\r\n                            }\r\n                        }\r\n\r\n                        // Xử lý các hero phòng thủ\r\n                        for (let i = fightTempData.defense_hero_data_array.length - 1; i >= 0; i--) {\r\n                            const defenseHero = fightTempData.defense_hero_data_array[i];\r\n                            if (defenseHero) {\r\n                                defenseHero.last_attack_time = 0;\r\n                                defenseHero.find_path_target = null;\r\n                                defenseHero.move_path = [];\r\n                                defenseHero.fight_state = HeroFightState.WAITING;\r\n                            }\r\n                        }\r\n                        gm.data.fight_temp_data.fight_state = FightState.RUN;\r\n                        this.update_view();\r\n                    } else {\r\n                        this.fight_fail();\r\n                    }\r\n                }\r\n            });\r\n            gm.ui.show_panel(gm.const.FightReviveHero);\r\n        } else {\r\n            this.fight_fail();\r\n        }\r\n    }\r\n\r\n    public fight_return(): void {\r\n        ReportData.instance.report_once_point(10667);\r\n        ReportData.instance.report_point(10668);\r\n\r\n        gm.data.fight_temp_data.build_fight_result_data(true);\r\n        this.fight_clear();\r\n\r\n        gm.ui.show_start();\r\n    }\r\n\r\n    private fight_fail(): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n        const ladderData = gm.data.ladder_data;\r\n\r\n        ladderData.fail_count++;\r\n        ladderData.async_write_data();\r\n        gm.data.start_data.async_write_data();\r\n\r\n        fightTempData.fight_state = FightState.FAIL;\r\n\r\n        cc.director.getScheduler().setTimeScale(gm.const.FIGHT_SPEED_X1);\r\n\r\n        gm.audio.play_effect(gm.const.AUDIO_20_FIGHT_FAIL);\r\n\r\n        this.update_view();\r\n\r\n        this.scheduleOnce(() => {\r\n            fightTempData.build_fight_result_data();\r\n            this.fight_clear();\r\n\r\n            if (gm.data.fight_temp_data.play_type == 0) {\r\n                gm.channel.report_event(\"fight\", {\r\n                    event_desc: \"突袭\",\r\n                    desc: \"失败\"\r\n                });\r\n\r\n                ReportData.instance.report_once_point(10825);\r\n                ReportData.instance.report_point(10826);\r\n            }\r\n\r\n            if (gm.data.mapCell_data.isGuide) {\r\n                gm.channel.report_event(\"ohayoo_game_guide\", {\r\n                    guideid: 16,\r\n                    guidedesc: cc.js.formatStr(\"16.进入战斗结算界面\")\r\n                });\r\n            }\r\n\r\n            gm.ui.show_panel(gm.const.FightResult);\r\n        }, 2);\r\n    }\r\n\r\n    private fight_reset(): void {\r\n        this.fight_clear();\r\n    }\r\n\r\n    private fight_clear(): void {\r\n        const fightTempData = gm.data.fight_temp_data;\r\n\r\n        this.hero_list.reset();\r\n        this.reward_list.reset();\r\n\r\n        for (let i = fightTempData.building_destroy_array.length - 1; i >= 0; i--) {\r\n            const node = fightTempData.building_destroy_array.pop();\r\n            if (node) {\r\n                gm.pool.put(node.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.hero_death_array.length - 1; i >= 0; i--) {\r\n            const hero = fightTempData.hero_death_array.pop();\r\n            if (hero) {\r\n                const animation = hero.getComponent(cc.Animation);\r\n                if (animation) {\r\n                    animation.stop();\r\n                    animation.clear();\r\n                }\r\n                gm.pool.put(hero.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.skill_item_array.length - 1; i >= 0; i--) {\r\n            const node = fightTempData.skill_item_array.pop();\r\n            if (node) {\r\n                gm.pool.put(node.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.hero_item_array.length - 1; i >= 0; i--) {\r\n            const hero = fightTempData.hero_item_array.pop();\r\n            if (hero) {\r\n                hero.reset();\r\n                gm.pool.put(hero.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.defense_hero_array.length - 1; i >= 0; i--) {\r\n            const defenseHero = fightTempData.defense_hero_array.pop();\r\n            if (defenseHero) {\r\n                defenseHero.reset();\r\n                gm.pool.put(defenseHero.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.building_item_array.length - 1; i >= 0; i--) {\r\n            const building = fightTempData.building_item_array.pop();\r\n            if (building) {\r\n                building.reset();\r\n                gm.pool.put(building.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.wall_item_array.length - 1; i >= 0; i--) {\r\n            const wall = fightTempData.wall_item_array.pop();\r\n            if (wall) {\r\n                wall.reset();\r\n                gm.pool.put(wall.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.prop_item_array.length - 1; i >= 0; i--) {\r\n            const prop = fightTempData.prop_item_array.pop();\r\n            if (prop) {\r\n                prop.reset();\r\n                gm.pool.put(prop.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.decoration_item_array.length - 1; i >= 0; i--) {\r\n            const decoration = fightTempData.decoration_item_array.pop();\r\n            if (decoration) {\r\n                decoration.reset();\r\n                gm.pool.put(decoration.node);\r\n            }\r\n        }\r\n\r\n        for (let i = fightTempData.map_item_array.length - 1; i >= 0; i--) {\r\n            const mapItem = fightTempData.map_item_array.pop();\r\n            if (mapItem) {\r\n                mapItem.reset();\r\n                gm.pool.put(mapItem.node);\r\n            }\r\n        }\r\n\r\n        gm.pool.put_children(this.effect_node);\r\n        gm.pool.put_children(this.text_node);\r\n\r\n        fightTempData.in_battle_hero_data = null;\r\n        fightTempData.goto_battle_count = 0;\r\n        fightTempData.delta_time = 0;\r\n        fightTempData.total_time = 0;\r\n        fightTempData.show_return_btn_timestamp = 0;\r\n        fightTempData.has_pop_revive = false;\r\n        fightTempData.fight_state = FightState.NONE;\r\n        fightTempData.record_fight_state = FightState.NONE;\r\n        fightTempData.death_hero_count = 0;\r\n        fightTempData.defense_hero_data_array = [];\r\n        fightTempData.prop_data_array = [];\r\n        fightTempData.map_item_data_array = [];\r\n        fightTempData.decoration_data_array = [];\r\n        fightTempData.building_data_array = [];\r\n        fightTempData.reward_data_array = [];\r\n        fightTempData.wall_data_array = [];\r\n        fightTempData.skill_data_array = [];\r\n        fightTempData.building_destroy_array = [];\r\n        fightTempData.hero_death_array = [];\r\n\r\n        this.boat_node.active = false;\r\n        this.wave_ps.node.active = false;\r\n    }\r\n\r\n    private editor_on_button_click_handler(event: cc.Event): void {\r\n        if (event.target == this.speed_1_btn.node) {\r\n            this.speed_2_btn.node.active = true;\r\n            this.speed_1_btn.node.active = false;\r\n            gm.data.fight_data.speed_scale = gm.const.FIGHT_SPEED_X2;\r\n            gm.data.fight_data.async_write_data();\r\n            cc.director.getScheduler().setTimeScale(gm.data.fight_data.speed_scale);\r\n        } else if (event.target == this.speed_2_btn.node) {\r\n            this.speed_2_btn.node.active = false;\r\n            this.speed_1_btn.node.active = true;\r\n            gm.data.fight_data.speed_scale = gm.const.FIGHT_SPEED_X1;\r\n            gm.data.fight_data.async_write_data();\r\n            cc.director.getScheduler().setTimeScale(gm.data.fight_data.speed_scale);\r\n        } else if (event.target == this.return_btn.node) {\r\n            gm.ui.async_show_module(gm.const.FightReturn);\r\n        }\r\n    }\r\n\r\n    public fly_to_boat(node: cc.Node, shouldInstantiate: boolean): void {\r\n        if (shouldInstantiate) {\r\n            const originalParent = node.parent;\r\n            node = cc.instantiate(node);\r\n            node.parent = originalParent;\r\n        }\r\n\r\n        const startWorldPosition = node.convertToWorldSpaceAR(cc.v3(0, 60));\r\n        const startLocalPosition = this.window_node.convertToNodeSpaceAR(startWorldPosition);\r\n\r\n        node.removeFromParent();\r\n        node.position = startLocalPosition;\r\n        this.window_node.addChild(node);\r\n\r\n        const targetWorldPosition = this.boat_box_node.convertToWorldSpaceAR(cc.Vec3.ZERO);\r\n        const targetLocalPosition = this.window_node.convertToNodeSpaceAR(targetWorldPosition);\r\n\r\n        const startPoint = cc.v2(startLocalPosition);\r\n        const endPoint = cc.v2(targetLocalPosition);\r\n        const controlPoint1 = startPoint.add(endPoint.sub(startPoint).multiply(cc.v2(0.14, 0.9)));\r\n        const controlPoint2 = startPoint.add(endPoint.sub(startPoint).multiply(cc.v2(0.53, 1.54)));\r\n\r\n        cc.tween(node).parallel(\r\n            cc.tween().to(0.6, { scale: 0.8 }),\r\n            cc.tween().bezierTo(0.6, controlPoint1, controlPoint2, endPoint)\r\n        ).call(() => {\r\n            const nodePoolItem = node.getComponent(NodePoolItem);\r\n            if (nodePoolItem) {\r\n                gm.pool.put(nodePoolItem.node);\r\n            } else {\r\n                node.removeFromParent()\r\n                node.destroy();\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    private hero_jump_to_boat(hero: FightHeroItem): void {\r\n        if (hero) {\r\n            const heroNode = hero.node;\r\n            const worldStartPosition = heroNode.convertToWorldSpaceAR(cc.v3(0, 60));\r\n            const localStartPosition = this.window_node.convertToNodeSpaceAR(worldStartPosition);\r\n\r\n            heroNode.removeFromParent();\r\n            heroNode.position = localStartPosition;\r\n            this.window_node.addChild(heroNode);\r\n\r\n            const worldBoatPosition = this.boat_node.convertToWorldSpaceAR(cc.Vec3.ZERO);\r\n            const localBoatPosition = this.window_node.convertToNodeSpaceAR(worldBoatPosition);\r\n\r\n            const startPoint = cc.v2(localStartPosition);\r\n            const endPoint = cc.v2(localBoatPosition);\r\n            const controlPoint1 = startPoint.add(endPoint.sub(startPoint).multiply(cc.v2(0.14, 0.9)));\r\n            const controlPoint2 = startPoint.add(endPoint.sub(startPoint).multiply(cc.v2(0.53, 1.54)));\r\n\r\n            cc.tween(heroNode).parallel(\r\n                cc.tween().to(0.6, { scale: 0.8 }),\r\n                cc.tween().bezierTo(0.6, startPoint.add(controlPoint1), startPoint.add(controlPoint2), endPoint)\r\n            ).call(() => {\r\n                const nodePoolItem = heroNode.getComponent(NodePoolItem);\r\n                if (nodePoolItem) {\r\n                    gm.pool.put(nodePoolItem.node);\r\n                } else {\r\n                    heroNode.removeFromParent();\r\n                    heroNode.destroy();\r\n                }\r\n            }).start();\r\n        }\r\n    }\r\n\r\n    private get_go_ashore_floor_position(startPosition: cc.Vec2): { dir_key: string, floor_position: cc.Vec3 } {\r\n        const fightData = gm.data.fight_temp_data;\r\n        let targetPosition = startPosition;\r\n        let directionKey = \"\";\r\n\r\n        outerLoop:\r\n        for (let i = 1; i < 3; i++) {\r\n            for (let edgeDirection in fightData.edge_map) {\r\n                directionKey = edgeDirection;\r\n\r\n                targetPosition = startPosition.add(cc.v2(fightData.edge_map[edgeDirection]).multiplyScalar(i));\r\n\r\n                if (\r\n                    targetPosition.x < 0 ||\r\n                    targetPosition.x >= fightData.map_size.x ||\r\n                    targetPosition.y < 0 ||\r\n                    targetPosition.y >= fightData.map_size.y\r\n                ) break outerLoop;\r\n\r\n                if (!fightData.map_item_data_array[targetPosition.x + targetPosition.y * fightData.map_size.x]) {\r\n                    break outerLoop;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            dir_key: directionKey,\r\n            floor_position: fightData.grid_position_to_floor_position(targetPosition)\r\n        }\r\n    }\r\n    public goto_battle(heroData: FightMapItem): void {\r\n        const fightData = gm.data.fight_temp_data;\r\n        if (fightData.goto_battle_count < fightData.hero_data_array.length) {\r\n            if (0 == fightData.show_return_btn_timestamp) {\r\n                (fightData.show_return_btn_timestamp = Date.now() + gm.const.FIGHT_RETURN_BUTTON_APPEAR_TIME);\r\n            }\r\n            const currentHero = fightData.in_battle_hero_data;\r\n            if (currentHero && currentHero.in_battle_state == HeroInBattleState.WILL_IN_BATTLE) {\r\n                currentHero.in_battle_state = HeroInBattleState.HAS_IN_BATTLE;\r\n                gm.data.event_emitter.emit(\"fight_in_battle\", currentHero);\r\n                fightData.goto_battle_count++;\r\n\r\n                const battlePosition = heroData.data;\r\n                currentHero.grid_index = battlePosition.cell_id;\r\n                currentHero.grid_position.x = battlePosition.grid_position.x;\r\n                currentHero.grid_position.y = battlePosition.grid_position.y;\r\n\r\n                const heroIndex = battlePosition.add_hero_index(currentHero.array_index);\r\n                currentHero.offset = heroIndex.offset;\r\n                const heroArrayIndex = currentHero.array_index;\r\n                if (fightData.play_type < 2) {\r\n                    const goAshorePosition = this.get_go_ashore_floor_position(currentHero.grid_position);\r\n                    gm.pool.async_get(BundleName.FIGHT, \"prefabs/fight_hero_item\", FightHeroItem, (heroItemPrefab) => {\r\n                        gm.pool.async_get(BundleName.FIGHT, \"prefabs/battle_ship\", NodePoolItem, (battleShipPrefab) => {\r\n                            this.map_node.addChild(battleShipPrefab.node, -1);\r\n                            battleShipPrefab.node.position = goAshorePosition.floor_position;\r\n                            battleShipPrefab.node.getChildByName(\"role\").addChild(heroItemPrefab.node);\r\n\r\n                            const heroData = fightData.hero_data_array[heroArrayIndex];\r\n                            heroItemPrefab.data = heroData;\r\n                            fightData.hero_item_array[heroArrayIndex] = heroItemPrefab;\r\n\r\n                            var e, o, i, _, n, r, d, s;\r\n                            const animationComponent = battleShipPrefab.getComponent(cc.Animation);\r\n\r\n                            if (animationComponent) {\r\n                                let shipAnimationName = \"battle_c_ship\";\r\n                                let scaleX = 1;\r\n                                let scaleY = 0;\r\n                                let offset = cc.Vec3.ZERO;\r\n\r\n                                if (goAshorePosition.dir_key == EdgeEnum[EdgeEnum.LEFT]) {\r\n                                    shipAnimationName = \"battle_c_ship\";\r\n                                    scaleY = scaleX = -1;\r\n                                    offset = cc.v3(-30, 20);\r\n                                } else if (goAshorePosition.dir_key == EdgeEnum[EdgeEnum.RIGHT]) {\r\n                                    shipAnimationName = \"battle_c_ship\";\r\n                                    scaleY = scaleX = 1;\r\n                                    offset = cc.v3(60, -20);\r\n                                } else if (goAshorePosition.dir_key == EdgeEnum[EdgeEnum.TOP]) {\r\n                                    shipAnimationName = \"battle_f_ship\";\r\n                                    scaleY = -(scaleX = 1);\r\n                                    offset = cc.v3(-10, 30)\r\n                                } else if (goAshorePosition.dir_key == EdgeEnum[EdgeEnum.BOTTOM]) {\r\n                                    shipAnimationName = \"battle_b_ship\";\r\n                                    scaleY = scaleX = 1;\r\n                                    offset = cc.v3(-20, -30);\r\n                                }\r\n\r\n                                animationComponent.once(cc.Animation.EventType.FINISHED, () => {\r\n                                    gm.pool.put(animationComponent.node)\r\n                                });\r\n\r\n                                const targetPosition = fightData.grid_position_to_position(battlePosition.grid_position);\r\n                                let travelDuration = 1;\r\n                                const currentPosition = this.convert_to_map_point(heroItemPrefab.node, cc.Vec3.ZERO);\r\n                                const distance = targetPosition.sub(currentPosition);\r\n                                const angle = Math.atan2(distance.y, distance.x);\r\n\r\n                                heroItemPrefab.play_spine_anim(\"move\", angle);\r\n                                cc.tween(heroItemPrefab.node).delay(0.2).call(() => {\r\n                                    animationComponent.pause();\r\n                                    const worldPosition = heroItemPrefab.node.convertToWorldSpaceAR(cc.Vec3.ZERO);\r\n                                    const nodePosition = this.map_node.convertToNodeSpaceAR(worldPosition);\r\n\r\n                                    heroItemPrefab.node.removeFromParent(false);\r\n                                    heroItemPrefab.node.position = nodePosition;\r\n\r\n                                    const dynamicLayer = gm.data.fight_temp_data.get_dynamic_node_layer(heroData.grid_index, FightDynamicNodeLayer.MOVE);\r\n                                    travelDuration = targetPosition.sub(nodePosition).mag() / 80;\r\n\r\n                                    if (gm.data.fight_temp_data.is_debug) {\r\n                                        heroItemPrefab.node.name = cc.js.formatStr(\"fight_hero_item_gridIndex@%d_zIndex@%d\", heroData.grid_index, dynamicLayer);\r\n                                    }\r\n\r\n                                    this.map_node.addChild(heroItemPrefab.node, dynamicLayer);\r\n                                    const distance = targetPosition.sub(nodePosition);\r\n                                    const angle = Math.atan2(distance.y, distance.x);\r\n\r\n                                    heroItemPrefab.play_spine_anim(\"move\", angle);\r\n                                    this.next_in_battle_hero();\r\n\r\n                                }).to(travelDuration, {\r\n                                    position: targetPosition\r\n                                }).call(() => {\r\n                                    animationComponent.resume();\r\n                                    if (-1 < battlePosition.prop_index) {\r\n                                        heroData.fight_state = HeroFightState.MOVING;\r\n                                        heroData.move_path = [];\r\n                                        heroData.find_path_target = fightData.prop_data_array[battlePosition.prop_index];\r\n                                    } else {\r\n                                        heroData.fight_state = HeroFightState.WAITING;\r\n                                        this.find_next_path(heroData);\r\n                                    }\r\n                                    this.common_hero_apply_passive_skill(heroData);\r\n                                }).start();\r\n\r\n                                animationComponent.play(shipAnimationName);\r\n                                animationComponent.node.scaleX = scaleX;\r\n                                animationComponent.node.zIndex = scaleY;\r\n                                animationComponent.node.position = offset.add(animationComponent.node.position);\r\n                            }\r\n                        })\r\n                    })\r\n                } else {\r\n                    gm.pool.async_get(BundleName.FIGHT, \"prefabs/fight_hero_item\", FightHeroItem, (heroItemPrefab) => {\r\n                        const heroData = fightData.hero_data_array[heroArrayIndex];\r\n                        const dynamicLayer = gm.data.fight_temp_data.get_dynamic_node_layer(heroData.grid_index, FightDynamicNodeLayer.MOVE);\r\n                        this.map_node.addChild(heroItemPrefab.node, dynamicLayer);\r\n                        if (gm.data.fight_temp_data.is_debug) {\r\n                            (heroItemPrefab.node.name = cc.js.formatStr(\"fight_hero_item_gridIndex@%d_zIndex@%d\", heroData.grid_index, dynamicLayer));\r\n                        }\r\n                        heroItemPrefab.node.position = fightData.grid_position_to_position(battlePosition.grid_position);\r\n                        heroItemPrefab.data = heroData;\r\n                        fightData.hero_item_array[heroArrayIndex] = heroItemPrefab;\r\n                        this.common_hero_apply_passive_skill(heroData);\r\n                        this.next_in_battle_hero();\r\n                    });\r\n                }\r\n                this.show_guider_finger_anim();\r\n            }\r\n        }\r\n    }\r\n\r\n    private next_in_battle_hero(): void {\r\n        const fightData = gm.data.fight_temp_data;\r\n        let currentHero = fightData.in_battle_hero_data;\r\n\r\n        if (fightData.goto_battle_count >= fightData.hero_data_array.length) {\r\n            for (let index = 0; index < fightData.map_item_array.length; index++) {\r\n                const mapItem = fightData.map_item_array[index];\r\n                if (mapItem && mapItem.data) {\r\n                    mapItem.update_view();\r\n                }\r\n            }\r\n        }\r\n\r\n        let nextHero: FightHeroItemData = null;\r\n        for (let heroIndex = 0; heroIndex < fightData.hero_data_array.length; heroIndex++) {\r\n            currentHero = fightData.hero_data_array[heroIndex];\r\n            if (currentHero.in_battle_state == HeroInBattleState.NOT_IN_BATTLE) {\r\n                currentHero.in_battle_state = HeroInBattleState.WILL_IN_BATTLE;\r\n                nextHero = currentHero;\r\n                break;\r\n            }\r\n        }\r\n\r\n        fightData.in_battle_hero_data = nextHero;\r\n        if (nextHero) {\r\n            gm.data.event_emitter.emit(\"fight_in_battle\", nextHero);\r\n        }\r\n    }\r\n\r\n    private find_next_path(hero: FightHeroItemData, target?: FightHeroItemData | FightBuildingItemData | FightWallItemData): boolean {\r\n        const fightData = gm.data.fight_temp_data;\r\n        let targetData: FightTargetSortData = null;\r\n\r\n        if (target) {\r\n            targetData = new FightTargetSortData();\r\n            targetData.index = target.array_index;\r\n\r\n            if (target instanceof FightHeroItemData) {\r\n                targetData.type = 3;\r\n            } else if (target instanceof FightBuildingItemData) {\r\n                targetData.type = 2;\r\n            } else if (target instanceof FightWallItemData) {\r\n                targetData.type = 4;\r\n            } else {\r\n                // cc.error(\"未知分支情况\");\r\n                cc.error(\"Nhánh chưa xác định.\");\r\n            }\r\n        } else if (hero instanceof FightHeroItemData) {\r\n            if (hero.type == HeroType.ATTACK) {\r\n                targetData = this.find_hero_attack_target(hero.grid_position, hero);\r\n            } else if (hero.type == HeroType.DEFENSE) {\r\n                targetData = this.find_defense_hero_attack_target(hero.grid_position, hero);\r\n            }\r\n        }\r\n\r\n        if (targetData) {\r\n            let isStaticTarget = true;\r\n            let foundTarget: FightPropItemData | FightBuildingItemData | FightHeroItemData | FightWallItemData = void cc.Vec2.ZERO;\r\n\r\n            if (targetData.type == 1) {\r\n                isStaticTarget = false;\r\n                foundTarget = fightData.prop_data_array[targetData.index];\r\n            } else if (targetData.type == 2) {\r\n                foundTarget = fightData.building_data_array[targetData.index];\r\n            } else if (targetData.type == 3) {\r\n                foundTarget = hero.type == HeroType.ATTACK ? fightData.defense_hero_data_array[targetData.index] : fightData.hero_data_array[targetData.index];\r\n            } else if (targetData.type == 4) {\r\n                foundTarget = fightData.wall_data_array[targetData.index];\r\n            }\r\n\r\n            if (!foundTarget) return false;\r\n\r\n            const targetGridPos = foundTarget.grid_position;\r\n            const grid = fightData.grid;\r\n            const pathfinder = fightData.a_star;\r\n\r\n            if (!grid.getWalkable(hero.grid_position.x, hero.grid_position.y)) {\r\n                grid.setWalkable(hero.grid_position.x, hero.grid_position.y, true);\r\n            }\r\n            grid.setStartNode(hero.grid_position.x, hero.grid_position.y);\r\n\r\n            if (!grid.getWalkable(targetGridPos.x, targetGridPos.y)) {\r\n                grid.setWalkable(targetGridPos.x, targetGridPos.y, true);\r\n            }\r\n            grid.setEndNode(targetGridPos.x, targetGridPos.y);\r\n\r\n            if (pathfinder.findPath(grid)) {\r\n                hero.move_start = pathfinder.path.shift();\r\n                hero.move_end = isStaticTarget ? pathfinder.path.pop() : pathfinder.path[pathfinder.path.length - 1];\r\n                hero.move_path = pathfinder.path;\r\n                hero.find_path_target = foundTarget;\r\n                hero.fight_state = HeroFightState.MOVING;\r\n\r\n                if (fightData.is_debug) {\r\n                    const debugColor = cc.color(\r\n                        Utils.math_random(true, 0, 256),\r\n                        Utils.math_random(true, 0, 256),\r\n                        Utils.math_random(true, 0, 256)\r\n                    );\r\n                    for (let i = 0; i < hero.move_path.length; i++) {\r\n                        const pathNode = hero.move_path[i];\r\n                        fightData.get_fight_map_item(pathNode.x, pathNode.y).land_spr.node.color = debugColor;\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                console.warn(\"寻路失败\");\r\n                return false;\r\n            }\r\n\r\n            if (!grid.getWalkable(hero.grid_position.x, hero.grid_position.y)) {\r\n                grid.setWalkable(hero.grid_position.x, hero.grid_position.y, false);\r\n            }\r\n\r\n            if (!grid.getWalkable(targetGridPos.x, targetGridPos.y)) {\r\n                grid.setWalkable(targetGridPos.x, targetGridPos.y, false);\r\n            }\r\n\r\n            grid.clearStartAndEndNode();\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private find_next_path_distance(startPos: cc.Vec2, endPos: cc.Vec2): number {\r\n        let minDistance = Number.MAX_SAFE_INTEGER;\r\n        const grid = gm.data.fight_temp_data.grid;\r\n        const pathfinder = gm.data.fight_temp_data.a_star;\r\n\r\n        const startWalkable = grid.getWalkable(startPos.x, startPos.y);\r\n        if (!startWalkable) grid.getWalkable(startPos.x, startPos.y);\r\n        grid.setStartNode(startPos.x, startPos.y);\r\n\r\n        const endWalkable = grid.getWalkable(endPos.x, endPos.y);\r\n        if (!endWalkable) grid.setWalkable(endPos.x, endPos.y, true);\r\n        grid.setEndNode(endPos.x, endPos.y);\r\n\r\n        if (pathfinder.findPath(grid)) {\r\n            minDistance = pathfinder.path.length - 1;\r\n        }\r\n\r\n        if (!startWalkable) grid.setWalkable(startPos.x, startPos.y, false);\r\n        if (!endWalkable) grid.setWalkable(endPos.x, endPos.y, false);\r\n        grid.clearStartAndEndNode();\r\n\r\n        return minDistance;\r\n    }\r\n\r\n\r\n    private find_hero_attack_target(heroPosition: cc.Vec2, heroData: FightHeroItemData): FightTargetSortData {\r\n        const fightData = gm.data.fight_temp_data;\r\n        const potentialTargets: FightTargetSortData[] = [];\r\n        for (let index = 0; index < fightData.building_data_array.length; index++) {\r\n            const building = fightData.building_data_array[index];\r\n            if (building && 0 < building.hp) {\r\n                const target = new FightTargetSortData;\r\n                target.pixel_distance = fightData.grid_position_to_position(heroPosition).sub(fightData.grid_position_to_position(building.grid_position)).mag();\r\n                target.find_path_distance = this.find_next_path_distance(heroPosition, building.grid_position);\r\n                target.priority = 1;\r\n                target.type = 2;\r\n                target.index = index;\r\n                target.find_path_distance != Number.MAX_SAFE_INTEGER && potentialTargets.push(target);\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < fightData.wall_data_array.length; index++) {\r\n            const wallData = fightData.wall_data_array[index];\r\n            if (wallData && 0 < wallData.hp) {\r\n                const target = new FightTargetSortData;\r\n                target.pixel_distance = fightData.grid_position_to_position(heroPosition).sub(fightData.grid_position_to_position(wallData.grid_position)).mag();\r\n                target.find_path_distance = this.find_next_path_distance(heroPosition, wallData.grid_position);\r\n                target.priority = 1;\r\n                target.type = 4;\r\n                target.index = index;\r\n                target.find_path_distance != Number.MAX_SAFE_INTEGER && potentialTargets.push(target);\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < fightData.defense_hero_data_array.length; index++) {\r\n            const defenseHero = fightData.defense_hero_data_array[index];\r\n            if (defenseHero && 0 < defenseHero.hp) {\r\n                const target = new FightTargetSortData;\r\n                target.pixel_distance = fightData.grid_position_to_position(heroPosition).sub(fightData.grid_position_to_position(defenseHero.grid_position)).mag();\r\n                target.find_path_distance = this.find_next_path_distance(heroPosition, defenseHero.grid_position);\r\n                target.priority = 0;\r\n                target.type = 3;\r\n                target.index = index;\r\n                target.find_path_distance != Number.MAX_SAFE_INTEGER && potentialTargets.push(target);\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < fightData.prop_data_array.length; index++) {\r\n            const propData = fightData.prop_data_array[index];\r\n            if (propData) {\r\n                const targer = new FightTargetSortData;\r\n                targer.pixel_distance = fightData.grid_position_to_position(heroPosition).sub(fightData.grid_position_to_position(propData.grid_position)).mag();\r\n                targer.find_path_distance = this.find_next_path_distance(heroPosition, propData.grid_position);\r\n                targer.priority = 2;\r\n                targer.type = 1;\r\n                targer.index = index;\r\n                targer.find_path_distance != Number.MAX_SAFE_INTEGER && potentialTargets.push(targer);\r\n            }\r\n        }\r\n\r\n        if (0 < potentialTargets.length) {\r\n            const sortedTargets: FightTargetSortData[] = [].concat(potentialTargets);\r\n            Utils.sort_by_props(sortedTargets, {\r\n                find_path_distance: \"ascending\",\r\n                pixel_distance: \"ascending\",\r\n                priority: \"ascending\"\r\n            });\r\n\r\n            let outOfRangeIndex = -1;\r\n            let sortedTarget: FightTargetSortData;\r\n            for (let index = 0; index < sortedTargets.length; index++) {\r\n                sortedTarget = sortedTargets[index]\r\n                if (sortedTarget.pixel_distance > heroData.attack_range) {\r\n                    outOfRangeIndex = index;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (0 < outOfRangeIndex) {\r\n                const inRangeTargets = sortedTargets.splice(0, outOfRangeIndex);\r\n                Utils.sort_by_props(inRangeTargets, {\r\n                    priority: \"ascending\",\r\n                    find_path_distance: \"ascending\",\r\n                    pixel_distance: \"ascending\"\r\n                });\r\n                return inRangeTargets[0];\r\n            }\r\n            return sortedTarget;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private find_defense_hero_attack_target(defenseHeroPosition: cc.Vec2, defenseHeroData: FightHeroItemData): FightTargetSortData | null {\r\n        const fightData = gm.data.fight_temp_data;\r\n        const potentialTargets: FightTargetSortData[] = [];\r\n        for (let index = 0; index < fightData.hero_data_array.length; index++) {\r\n            const heroData = fightData.hero_data_array[index];\r\n            if (heroData && 0 < heroData.hp && heroData.in_battle_state == HeroInBattleState.HAS_IN_BATTLE) {\r\n                const target = new FightTargetSortData;\r\n                target.distance = Math.abs(defenseHeroPosition.x - heroData.grid_position.x) + Math.abs(defenseHeroPosition.y - heroData.grid_position.y);\r\n                target.pixel_distance = fightData.grid_position_to_position(defenseHeroPosition).sub(fightData.grid_position_to_position(heroData.grid_position)).mag();\r\n                target.find_path_distance = this.find_next_path_distance(defenseHeroPosition, heroData.grid_position);\r\n                target.priority = 1;\r\n                target.type = 3;\r\n                target.index = index;\r\n                target.find_path_distance != Number.MAX_SAFE_INTEGER && potentialTargets.push(target);\r\n            }\r\n        }\r\n\r\n        if (0 < potentialTargets.length) {\r\n            Utils.sort_by_props(potentialTargets, {\r\n                find_path_distance: \"ascending\",\r\n                pixel_distance: \"ascending\",\r\n                priority: \"ascending\"\r\n            });\r\n            const potentialTarget = potentialTargets[0];\r\n\r\n            if (potentialTarget.pixel_distance <= defenseHeroData.search_range) {\r\n                return potentialTarget;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private find_building_attack_target(buildingData: FightBuildingItemData | FightWallItemData): FightHeroItemData | null {\r\n        if (buildingData.attack_range <= 0) {\r\n            return null;\r\n        }\r\n\r\n        const fightData = gm.data.fight_temp_data;\r\n        const buildingPosition = buildingData.grid_position;\r\n        const potentialTargets = [];\r\n        for (let index = 0; index < fightData.hero_data_array.length; index++) {\r\n            const heroData = fightData.hero_data_array[index];\r\n            if (heroData && 0 < heroData.hp && heroData.in_battle_state == HeroInBattleState.HAS_IN_BATTLE) {\r\n                const target = new FightTargetSortData;\r\n                target.distance = Math.abs(buildingPosition.x - heroData.grid_position.x) + Math.abs(buildingPosition.y - heroData.grid_position.y);\r\n                target.pixel_distance = fightData.grid_position_to_position(buildingPosition).sub(fightData.grid_position_to_position(heroData.grid_position)).mag();\r\n                target.find_path_distance = this.find_next_path_distance(buildingPosition, heroData.grid_position),\r\n                    target.priority = 1;\r\n                target.type = 3;\r\n                target.index = index;\r\n                target.find_path_distance != Number.MAX_SAFE_INTEGER && potentialTargets.push(target);\r\n            }\r\n        }\r\n\r\n        if (0 < potentialTargets.length) {\r\n            Utils.sort_by_props(potentialTargets, {\r\n                find_path_distance: \"ascending\",\r\n                pixel_distance: \"ascending\",\r\n                priority: \"ascending\"\r\n            });\r\n\r\n            const potentialTarget = potentialTargets[0];\r\n            if (potentialTarget.pixel_distance <= buildingData.attack_range) {\r\n                return fightData.hero_data_array[potentialTarget.index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public building_call_defense_hero(building: FightBuildingItemData | FightWallItemData): void {\r\n        const fightData = gm.data.fight_temp_data;\r\n        const potentialDefenseHeroes = [];\r\n        for (let index = 0; index < fightData.defense_hero_data_array.length; index++) {\r\n            const defenseHero = fightData.defense_hero_data_array[index];\r\n            if (defenseHero && 0 < defenseHero.hp) {\r\n                const target = new FightTargetSortData;\r\n                target.distance = Math.abs(building.grid_position.x - defenseHero.grid_position.x) + Math.abs(building.grid_position.y - defenseHero.grid_position.y);\r\n                target.pixel_distance = fightData.grid_position_to_position(building.grid_position).sub(fightData.grid_position_to_position(defenseHero.grid_position)).mag();\r\n                target.priority = 1;\r\n                target.type = 3;\r\n                target.index = index;\r\n                potentialDefenseHeroes.push(target);\r\n            }\r\n        }\r\n\r\n        if (0 < potentialDefenseHeroes.length) {\r\n            Utils.sort_by_props(potentialDefenseHeroes, {\r\n                pixel_distance: \"ascending\",\r\n                priority: \"ascending\"\r\n            });\r\n\r\n            for (let index = 0; index < potentialDefenseHeroes.length; index++) {\r\n                const selectedHeroData = potentialDefenseHeroes[index];\r\n                if (!(selectedHeroData.pixel_distance <= building.call_range)) {\r\n                    return;\r\n                }\r\n\r\n                const defenseHero = fightData.defense_hero_data_array[selectedHeroData.index]\r\n                if (defenseHero && building.lock_attack_target) {\r\n                    this.find_next_path(defenseHero, building.lock_attack_target);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public convert_to_scene_point(node: cc.Node, localPoint?: cc.Vec3): cc.Vec3 {\r\n        localPoint = (localPoint === undefined) ? cc.Vec3.ZERO : localPoint;\r\n        if (localPoint == null) {\r\n            localPoint = cc.Vec3.ZERO;\r\n        }\r\n        const worldPoint = node.convertToWorldSpaceAR(localPoint);\r\n        return this.scene_node.convertToNodeSpaceAR(worldPoint);\r\n\r\n    }\r\n\r\n    public convert_to_map_point(node: cc.Node, localPoint: cc.Vec3): cc.Vec3 {\r\n        localPoint = (localPoint === undefined) ? cc.Vec3.ZERO : localPoint;\r\n        if (localPoint == null) {\r\n            localPoint = cc.Vec3.ZERO;\r\n        }\r\n        const worldPoint = node.convertToWorldSpaceAR(localPoint);\r\n        return this.map_node.convertToNodeSpaceAR(worldPoint);\r\n    }\r\n\r\n    public convert_to_effect_point(node: cc.Node, localPoint: cc.Vec3): cc.Vec3 {\r\n        localPoint = (localPoint === undefined) ? cc.Vec3.ZERO : localPoint;\r\n        if (localPoint == null) {\r\n            localPoint = cc.Vec3.ZERO;\r\n        }\r\n        const worldPoint = node.convertToWorldSpaceAR(localPoint);\r\n        return this.effect_node.convertToNodeSpaceAR(worldPoint);\r\n    }\r\n}"]}