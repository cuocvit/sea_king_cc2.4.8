{"version":3,"sources":["assets\\start-scene\\scripts\\GraphicsUtils.ts"],"names":[],"mappings":";;;;;;;AAkBA,IAAM,aAAa,GAAkB;IACnC,cAAc,EAAE,UAAC,CAAC;QAChB,IAAI,CAAU,CAAC;QACf,IAAI,CAAC,GAAa,CAAC,CAAC,KAAK,CAAC;QAC1B,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IACxH,CAAC;IAED,UAAU,EAAE,UAAC,CAAC,EAAE,CAAC,EAAE,CAAkB,EAAE,CAAC;QAArB,kBAAA,EAAA,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK;IAAU,CAAC;IAEhD,WAAW,EAAE,cAAQ,CAAC;IACtB,cAAc,EAAE,UAAC,CAAC;QAChB,IAAI,CAAU,CAAC;QACf,IAAI,CAAC,GAAgB,CAAC,CAAC,KAAK,CAAC;QAC7B,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3H,CAAC;IACD,WAAW,EAAE,cAAQ,CAAC;IACtB,WAAW,EAAE,UAAC,IAAa,EAAE,KAAe,EAAE,IAAa,EAAE,CAAM,IAAO,CAAC;IAC3E,gBAAgB,EAAE,UAAC,IAAa,EAAE,KAAe,EAAE,IAAa,EAAE,CAAM,IAAO,CAAC;IAChF,SAAS,EAAE,UAAC,IAAa,EAAE,KAAe,EAAE,IAAa,EAAE,IAAa,EAAE,CAAS,EAAE,CAAM,IAAO,CAAC;IACnG,YAAY,EAAE,cAAQ,CAAC;IACvB,UAAU,EAAE,cAAQ,CAAC;IACrB,gBAAgB,EAAE,cAAQ,CAAC;IAC3B,cAAc,EAAE,cAAQ,CAAC;IACzB,eAAe,EAAE,KAAK;IACtB,UAAU,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;CACpC,CAAC;AAEO,sCAAa","file":"","sourceRoot":"/","sourcesContent":["//\r\ninterface GraphicsUtils {\r\n  get_label_comp: (t: { label?: cc.Label; addChild: (node: cc.Node, zIndex: number) => void }) => cc.Label;\r\n  draw_label: (t: any, e: any, a?: cc.Color, i?: any) => void;\r\n  clear_label: () => void;\r\n  get_graph_comp: (t: { graph?: cc.Graphics; addChild: (node: cc.Node, zIndex: number) => void }) => cc.Graphics;\r\n  clear_graph: () => void;\r\n  draw_circle: (node: cc.Node, color: cc.Color, zero: cc.Vec3, t: any) => void;\r\n  draw_fill_circle: (node: cc.Node, color: cc.Color, zero: cc.Vec3, t: any) => void;\r\n  draw_line: (node: cc.Node, color: cc.Color, zero: cc.Vec3, vec3: cc.Vec3, e: number, c: any) => void;\r\n  draw_polygon: () => void;\r\n  draw_bound: () => void;\r\n  draw_bound_start: () => void;\r\n  draw_bound_end: () => void;\r\n  show_debug_draw: boolean | number | string;\r\n  fill_color: cc.Color;\r\n}\r\n\r\nconst GraphicsUtils: GraphicsUtils = {\r\n  get_label_comp: (t) => {\r\n    let e: cc.Node;\r\n    let a: cc.Label = t.label;\r\n    return a || (e = new cc.Node(\"label\"), t.label = a = e.addComponent(cc.Label), t.addChild(e, cc.macro.MAX_ZINDEX)), a;\r\n  },\r\n\r\n  draw_label: (t, e, a = cc.Color.BLACK, i) => { },\r\n\r\n  clear_label: () => { },\r\n  get_graph_comp: (t) => {\r\n    let e: cc.Node;\r\n    let a: cc.Graphics = t.graph;\r\n    return a || (e = new cc.Node(\"graph\"), t.graph = a = e.addComponent(cc.Graphics), t.addChild(e, cc.macro.MAX_ZINDEX)), a;\r\n  },\r\n  clear_graph: () => { },\r\n  draw_circle: (node: cc.Node, color: cc.Color, zero: cc.Vec3, t: any) => { },\r\n  draw_fill_circle: (node: cc.Node, color: cc.Color, zero: cc.Vec3, t: any) => { },\r\n  draw_line: (node: cc.Node, color: cc.Color, zero: cc.Vec3, vec3: cc.Vec3, e: number, c: any) => { },\r\n  draw_polygon: () => { },\r\n  draw_bound: () => { },\r\n  draw_bound_start: () => { },\r\n  draw_bound_end: () => { },\r\n  show_debug_draw: false,\r\n  fill_color: cc.color(255, 0, 0, 30)\r\n};\r\n\r\nexport { GraphicsUtils };"]}