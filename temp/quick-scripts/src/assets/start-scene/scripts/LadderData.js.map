{"version":3,"sources":["assets\\start-scene\\scripts\\LadderData.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { StorageBase } from './StorageBase';\r\nimport { BuildTypeEnum, RewardIdEnum, SetItemNumEnum } from './Constants';\r\nimport { TaskConditionType } from './TaskData';\r\nimport { TempData } from './TempData';\r\nimport { ReportData } from './NetUtils';\r\nimport { gm } from './GameManager';\r\nimport { LadderAchievementConfig } from '../../common/configs/ladder_achievement';\r\n\r\n// @\r\nexport class LadderData extends StorageBase {\r\n    public static readonly EVENT_DATA_CHANGE = \"fight_data_change\";\r\n    //\r\n    public STORAGE_KEY: string = \"LadderData\";\r\n    public achievement_id: number = 0;\r\n    public fail_count: number = 0;\r\n    public fight_count: number = 0;\r\n    //\r\n    private _ladder_star: number = 0;\r\n    private _total_star: number = 0;\r\n\r\n    // @\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    // @\r\n    get ladder_star(): number {\r\n        return this._ladder_star;\r\n    }\r\n\r\n    // @\r\n    get total_star(): number {\r\n        return this._total_star;\r\n    }\r\n\r\n    // @\r\n    public add_ladder_achievement_star(tt: number): void {\r\n        const buildData = gm.data.mapCell_data.getBuildDataByType(BuildTypeEnum.GARRISION_TYPE);\r\n        if (!buildData || buildData.buildLvl < 1) {\r\n            this._ladder_star += tt;\r\n        }\r\n\r\n        this._total_star += tt;\r\n        gm.data.task_data.update_task_progress(TaskConditionType.GET_STAR, tt);\r\n        const LadderAchievementConfig = gm.config.get_row_data(\"LadderAchievementConfigData\", this.achievement_id + \"\") as LadderAchievementConfig;\r\n        \r\n        if (this._total_star >= LadderAchievementConfig.star) {\r\n            const rewardArray = gm.data.ladder_temp_data.ladder_achievement_data_array[this.achievement_id - 1].reward_array;\r\n            TempData.is_need_open_barrkPanel = !1;\r\n            for (let index = 0; index < rewardArray.length; index++) {\r\n                const reward = rewardArray[index];\r\n                if (23001 <= reward.reward_id && reward.reward_id <= 23099) {\r\n                    gm.data.mapCell_data.reelUnlcokHero(reward.reward_id);\r\n                    cc.Canvas.instance.scheduleOnce(() => {\r\n                        gm.ui.set_module_args(gm.const.GetReel.key, true);\r\n                        gm.ui.async_show_module(gm.const.GetReel);\r\n                    }, 0.1);\r\n                    TempData.is_need_open_barrkPanel = true;\r\n\r\n                } else if (reward.reward_id == RewardIdEnum.GOLD) {\r\n                    gm.data.mapCell_data.setAddGameCoin(SetItemNumEnum.ADD_ITEM_TYPE, reward.reward_num);\r\n\r\n                } else if (reward.reward_id == RewardIdEnum.DIAMOND) {\r\n                    gm.data.mapCell_data.setAddGameDiamond(SetItemNumEnum.ADD_ITEM_TYPE, reward.reward_num);\r\n                } else if (reward.reward_id == RewardIdEnum.BARREL) {\r\n                    gm.data.mapCell_data.addBarrelNum(reward.reward_num);\r\n                }\r\n                else {\r\n                    const arr: number[] = [];\r\n                    for (let r = 0; r < reward.reward_num; r++)\r\n                        arr.push(reward.reward_id);\r\n                    gm.data.mapCell_data.addWareHouseList(arr)\r\n                }\r\n            }\r\n\r\n            this.achievement_id++;\r\n            ReportData.instance.report_once_point(10700 + this.achievement_id);\r\n            gm.data.event_emitter.emit(\"ladder_achievement_upgrade\");\r\n        }\r\n        this.async_write_data();\r\n        gm.ui.show_coin_fly(RewardIdEnum.STAR, gm.ui.mapMainUI.ship.convertToNodeSpaceAR(cc.Vec3.ZERO));\r\n    } // end: add_ladder_achievement_star\r\n\r\n    // @\r\n    public async_read_data<T>(callback: (data: T) => void): void {\r\n        const self = this;\r\n        super.async_read_data((data: T) => {\r\n            if (self.is_init) {\r\n                self.fight_count = self.fight_count === null ? 0 : self.fight_count;\r\n            } else {\r\n                self.achievement_id = 1;\r\n                ReportData.instance.report_once_point(10700 + self.achievement_id);\r\n                self._ladder_star = 0;\r\n                self.fight_count = 0;\r\n                self.is_init = true;\r\n                self.async_write_data();\r\n            }\r\n            callback && callback(data);\r\n        });\r\n    }\r\n\r\n    // @\r\n    public async_write_data(callback?: () => void): void {\r\n        gm.data.event_emitter.emit(LadderData.EVENT_DATA_CHANGE);\r\n        super.async_write_data(callback);\r\n    }\r\n}\r\n"]}