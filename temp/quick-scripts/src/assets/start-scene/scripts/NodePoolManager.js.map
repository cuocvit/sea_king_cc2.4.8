{"version":3,"sources":["assets\\start-scene\\scripts\\NodePoolManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nimport { NodePoolItem } from './NodePoolItem';\r\nimport { Utils } from './Utils';\r\nimport { BundleName, INotice } from \"./Constants\";\r\n\r\n//\r\nexport class NodePoolManager {\r\n    // @\r\n    private static _instance: NodePoolManager | null = null;\r\n    private _pools: { [key: string]: cc.NodePool } = {};\r\n\r\n    // @\r\n    public static get instance(): NodePoolManager {\r\n        if (!this._instance) this._instance = new NodePoolManager();\r\n        return this._instance;\r\n    }\r\n\r\n    // @, type!!!\r\n    public init(\r\n        bundleName: BundleName,\r\n        prefabName: string,\r\n        component: { prototype: NodePoolItem & cc.Component; },\r\n        initialSize: number = 0,\r\n        callback: (() => void) | null = null\r\n    ): void {\r\n        const poolKey: string = this.get_key(bundleName, prefabName);\r\n        let pool: cc.NodePool = this._pools[poolKey];\r\n        if (pool || poolKey === \"\") {\r\n            cc.log(\"do not repeat init pool \" + prefabName);\r\n            if (callback) callback();\r\n        } else {\r\n            pool = new cc.NodePool(component);\r\n            this._pools[poolKey] = pool;\r\n            this.async_get_prefab(bundleName, prefabName, () => {\r\n                for (let i = 0; i < initialSize; i++) {\r\n                    pool.put(this.get_instance_comp(bundleName, prefabName, component).node);\r\n                }\r\n                if (callback) callback();\r\n            });\r\n        }\r\n    }\r\n\r\n    // @\r\n    public is_init(bundleName: BundleName, prefabName: string): boolean {\r\n        const poolKey: string = this.get_key(bundleName, prefabName);\r\n        return (!!this._pools[poolKey] || prefabName === \"\");\r\n    }\r\n\r\n    // @\r\n    private get_key(bundleName: BundleName, prefabName: string): string {\r\n        return `${bundleName}://${prefabName}`;\r\n    }\r\n\r\n    // @\r\n    private async_get_prefab(bundleName: BundleName, prefabName: string, callback: (prefab: cc.Prefab) => void): void {\r\n        Utils.async_get_bundle(bundleName, (bundle: cc.AssetManager.Bundle) => {\r\n            const prefab: cc.Prefab = bundle.get<cc.Prefab>(prefabName, cc.Prefab);\r\n            if (prefab) {\r\n                callback(prefab);\r\n            } else {\r\n                bundle.load<cc.Prefab>(prefabName, cc.Prefab, (error: Error, loadedPrefab: cc.Prefab) => {\r\n                    if (error) {\r\n                        console.error(error);\r\n                    } else {\r\n                        callback(loadedPrefab);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // @, type ??? component: any): cc.Component | null\r\n    private get_instance_comp<T extends NodePoolItem & cc.Component>(bundleName: BundleName, prefabName: string, component: { prototype: T }): T | null {\r\n        const bundle: cc.AssetManager.Bundle = cc.assetManager.getBundle(bundleName);\r\n        const prefab: cc.Prefab = bundle?.get<cc.Prefab>(prefabName, cc.Prefab);\r\n\r\n        if (prefab) {\r\n            // console.error(prefab._name, component);\r\n            const instance: T = cc.instantiate(prefab).getComponent<T>(component);\r\n            if (instance) {\r\n                instance.load_url = prefabName;\r\n                instance.bundle_name = bundleName;\r\n                return instance;\r\n            }\r\n            cc.error(\"prefab does not have component \" + component);\r\n        }\r\n        cc.error(\"Make sure the resource has been loaded before calling\");\r\n        return null;\r\n    }\r\n\r\n    // @\r\n    public get<T extends NodePoolItem & cc.Component>(bundleName: BundleName, prefabName: string, component: { prototype: T }): T | null {\r\n        const poolKey: string = this.get_key(bundleName, prefabName);\r\n        let pool: cc.NodePool = this._pools[poolKey];\r\n        if (!pool) {\r\n            pool = new cc.NodePool(component);\r\n            this._pools[poolKey] = pool;\r\n        }\r\n        if (pool.size() > 0) {\r\n            return pool.get().getComponent<T>(component);\r\n        } else {\r\n            return this.get_instance_comp<T>(bundleName, prefabName, component);\r\n        }\r\n    }\r\n\r\n    // @\r\n    // public async_get<T extends INotice & cc.Component>(bundleName: BundleName, prefabName: string, component: { prototype: T }, callback: (component: T | null) => void): void {\r\n    public async_get<T extends NodePoolItem & cc.Component>(bundleName: BundleName, prefabName: string, component: { prototype: T }, callback: (component: T | null) => void): void {\r\n        const poolKey: string = this.get_key(bundleName, prefabName);\r\n        let pool: cc.NodePool = this._pools[poolKey];\r\n        if (!pool) {\r\n            pool = new cc.NodePool(component);\r\n            this._pools[poolKey] = pool;\r\n        }\r\n        if (pool.size() > 0) {\r\n            callback(pool.get().getComponent<T>(component));\r\n            return;\r\n        }\r\n        this.async_get_prefab(bundleName, prefabName, () => {\r\n            // console.log(\"async_get\", component);\r\n            callback(this.get_instance_comp<T>(bundleName, prefabName, component));\r\n        });\r\n    }\r\n\r\n    // @\r\n    public put(node: cc.Node | null): void {\r\n        if (node == null) return;\r\n        const component: NodePoolItem = node.getComponent(NodePoolItem);\r\n        if (!component) return;\r\n        const poolKey: string = this.get_key(component.bundle_name, component.load_url);\r\n        const pool: cc.NodePool = this._pools[poolKey];\r\n        if (pool) {\r\n            node.removeFromParent(true);\r\n            pool.put(node);\r\n        } else {\r\n            cc.warn(\"pool does not exist\");\r\n        }\r\n    }\r\n\r\n    // @\r\n    public put_children(parentNode: cc.Node): void {\r\n        for (let i = parentNode.childrenCount - 1; i >= 0; i--) {\r\n            this.put(parentNode.children[i]);\r\n        }\r\n    }\r\n\r\n    // @ (not use)\r\n    /* public size(bundleName: BundleName, prefabName: string): number | void {\r\n        const poolKey: string = this.get_key(bundleName, prefabName);\r\n        const pool: cc.NodePool = this._pools[poolKey];\r\n        if (pool) {\r\n            return pool.size();\r\n        }\r\n        cc.warn(\"pool does not exist\");\r\n    } */\r\n\r\n    // @ (not use)\r\n    /* public clear(bundleName: BundleName, prefabName: string): void {\r\n        const poolKey: string = this.get_key(bundleName, prefabName);\r\n        const pool: cc.NodePool = this._pools[poolKey];\r\n        if (pool) {\r\n            pool.clear();\r\n        } else {\r\n            cc.warn(\"pool does not exist\");\r\n        }\r\n    } */\r\n\r\n    // !!@ (not use)\r\n    /* public check(): void {\r\n        for (const poolKey in this._pools) {\r\n            const pool = this._pools[poolKey]._pool;\r\n            for (let i = 0; i < pool.length; i++) {\r\n                if (pool[i].parent) {\r\n                    cc.log(pool[i]);\r\n                }\r\n            }\r\n        }\r\n    } */\r\n}\r\n"]}