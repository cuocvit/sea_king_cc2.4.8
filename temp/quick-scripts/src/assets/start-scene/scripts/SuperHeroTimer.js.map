{"version":3,"sources":["assets\\start-scene\\scripts\\SuperHeroTimer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["//\r\nimport { gm } from './GameManager';\r\nimport { Timer } from './Timer';\r\n\r\nconst { ccclass } = cc._decorator;\r\n\r\n// @\r\n@ccclass\r\nclass SuperHeroTimer extends cc.Component {\r\n    private _timer: Timer | null = null;\r\n    private _updataTimer: number = 0;\r\n\r\n    // @\r\n    public init(): void {\r\n        this._updataTimer = 0;\r\n        if (!this._timer) this._timer = new Timer();\r\n        this.initBarrelData();\r\n        this.initSuperHeroTime();\r\n        if (!this._timer.is_running) {\r\n            this._timer.start(() => {\r\n                this.refreshSuperHeroTime();\r\n            }, 1000, 0);\r\n        }\r\n    }\r\n\r\n    // @\r\n    private initSuperHeroTime(): void {\r\n        const superHeroData = gm.data.mapCell_data.getAllSuperHeroData();\r\n        for (let i = 0; i < superHeroData.length; i++) {\r\n            if (superHeroData[i].heroState === 1) {\r\n                if (superHeroData[i].curReliveTime === 0) {\r\n                    superHeroData[i].curReliveTime = Math.floor(Date.now() / 1000);\r\n                    superHeroData[i].nextReliveTime = Math.floor(Date.now() / 1000) + gm.const.SUPERHERORELIVETIME;\r\n                } else if (superHeroData[i].curReliveTime >= superHeroData[i].nextReliveTime) {\r\n                    superHeroData[i].heroState = 0;\r\n                    superHeroData[i].hp = Math.floor(0.5 * superHeroData[i].maxHp);\r\n                    superHeroData[i].curReliveTime = Math.floor(Date.now() / 1000);\r\n                    superHeroData[i].nextReliveTime = Math.floor(Date.now() / 1000) + gm.const.SUPERHERORECIVETIME;\r\n                } else {\r\n                    superHeroData[i].nextReliveTime = Math.floor(Date.now() / 1000) + (superHeroData[i].nextReliveTime - superHeroData[i].curReliveTime);\r\n                    superHeroData[i].curReliveTime = Math.floor(Date.now() / 1000);\r\n                }\r\n            } else if (superHeroData[i].hp >= superHeroData[i].maxHp) {\r\n                superHeroData[i].curReliveTime = 0;\r\n                superHeroData[i].nextReliveTime = 0;\r\n            } else if (superHeroData[i].curReliveTime >= superHeroData[i].nextReliveTime) {\r\n                superHeroData[i].curReliveTime = Math.floor(Date.now() / 1000);\r\n                superHeroData[i].nextReliveTime = Math.floor(Date.now() / 1000) + gm.const.SUPERHERORECIVETIME;\r\n            } else {\r\n                superHeroData[i].nextReliveTime = Math.floor(Date.now() / 1000) + (superHeroData[i].nextReliveTime - superHeroData[i].curReliveTime);\r\n                superHeroData[i].curReliveTime = Math.floor(Date.now() / 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    // @\r\n    private refreshSuperHeroTime(): void {\r\n        this._updataTimer++;\r\n        if (this._updataTimer >= 600) {\r\n            this._updataTimer = 0;\r\n            gm.data.mapCell_data.checkLocalData();\r\n        }\r\n        const superHeroData = gm.data.mapCell_data.getAllSuperHeroData();\r\n        //\r\n        for (let i = 0; i < superHeroData.length; i++) {\r\n            if (superHeroData[i].nextReliveTime > 0) {\r\n                superHeroData[i].curReliveTime++;\r\n                if (superHeroData[i].curReliveTime >= superHeroData[i].nextReliveTime) {\r\n                    if (superHeroData[i].heroState === 1) {\r\n                        superHeroData[i].heroState = 0;\r\n                        superHeroData[i].hp = Math.floor(0.5 * superHeroData[i].maxHp);\r\n                        superHeroData[i].curReliveTime = Math.floor(Date.now() / 1000);\r\n                        superHeroData[i].nextReliveTime = Math.floor(Date.now() / 1000) + gm.const.SUPERHERORECIVETIME;\r\n                        gm.ui.emit(\"refresh_super_hero_color\", superHeroData[i].cellID, superHeroData[i].heroid);\r\n                    } else {\r\n                        superHeroData[i].hp = Math.min(superHeroData[i].maxHp, superHeroData[i].hp + gm.const.SUPERHERORECIVEHP);\r\n                        superHeroData[i].curReliveTime = superHeroData[i].maxHp <= superHeroData[i].hp ? 0 : Math.floor(Date.now() / 1000);\r\n                        superHeroData[i].nextReliveTime = superHeroData[i].maxHp <= superHeroData[i].hp ? 0 : Math.floor(Date.now() / 1000) + gm.const.SUPERHERORECIVETIME;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.refreshBarrelTime();\r\n    }\r\n\r\n    // @\r\n    private initBarrelData(): void {\r\n        gm.data.mapCell_data.initBarrelTime();\r\n    }\r\n\r\n    // @\r\n    private refreshBarrelTime(): void {\r\n        if (!gm.data.mapCell_data.isGuide && gm.data.mapCell_data.roleBarrelData.nextFreeBarrelTime > 0) {\r\n            gm.data.mapCell_data.roleBarrelData.curFreeBarrelTime++;\r\n            if (gm.data.mapCell_data.roleBarrelData.curFreeBarrelTime >= gm.data.mapCell_data.roleBarrelData.nextFreeBarrelTime) {\r\n                gm.data.mapCell_data.roleBarrelData.curBarrelNum = Math.min(gm.data.mapCell_data.roleBarrelData.maxBarrelNum, gm.data.mapCell_data.roleBarrelData.curBarrelNum + gm.data.mapCell_data.roleBarrelData.nextFreeBarrelNum);\r\n                if (gm.data.mapCell_data.roleBarrelData.curBarrelNum >= gm.data.mapCell_data.roleBarrelData.maxBarrelNum) {\r\n                    gm.data.mapCell_data.roleBarrelData.nextFreeBarrelTime = 0;\r\n                    gm.data.mapCell_data.roleBarrelData.curFreeBarrelTime = 0;\r\n                } else {\r\n                    gm.data.mapCell_data.roleBarrelData.curFreeBarrelTime = Math.floor(Date.now() / 1000);\r\n                    gm.data.mapCell_data.roleBarrelData.nextFreeBarrelTime = Math.floor(Date.now() / 1000) + gm.data.mapCell_data.roleBarrelData.freeBarrelCd;\r\n                }\r\n                gm.data.mapCell_data.async_write_data();\r\n            }\r\n        }\r\n    } \r\n}\r\n\r\nexport { SuperHeroTimer };\r\n"]}