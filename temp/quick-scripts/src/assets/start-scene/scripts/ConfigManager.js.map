{"version":3,"sources":["assets\\start-scene\\scripts\\ConfigManager.ts"],"names":[],"mappings":";;;;;;;AAAA,KAAK;AACL,iDAAgD;AAChD,yCAAwC;AA0DxC;IAAA;QACI,SAAI,GAAkB,EAAE,CAAC;QAEzB,aAAQ,GAAuC,EAAE,CAAC;QAClD,sBAAiB,GAAa,EAAE,CAAC;IACrC,CAAC;IAAD,aAAC;AAAD,CALA,AAKC,IAAA;AALY,wBAAM;AASnB,uBAAuB;AACvB;IAAA;QAQI,KAAK;QACY,gBAAW,GAAW,QAAQ,CAAC;QAC/B,YAAO,GAA2B,EAAE,CAAC;QAC9C,gBAAW,GAAgB,CAAC,CAAC;IAmVzC,CAAC;IAhVG,sBAAkB,yBAAQ;QAD1B,KAAK;aACL;YACI,IAAI,CAAC,IAAI,CAAC,SAAS;gBAAE,IAAI,CAAC,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;YAC1D,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED,KAAK;IACE,kCAAU,GAAjB,UAAkB,QAAoB;QAAtC,iBA2BC;QA1BG,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC;YAAE,OAAO;QACjC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,YAAoC;YACzE,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,KAAY,EAAE,eAA6B;gBACrG,IAAI,KAAK,EAAE;oBACP,EAAE,CAAC,KAAK,CAAC,gCAA8B,KAAI,CAAC,WAAW,SAAI,aAAa,CAAC,aAAa,qBAAkB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;oBACzH,OAAO;iBACV;gBACD,8EAA8E;gBAC9E,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,cAAc,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;gBACtE,KAAI,CAAC,sBAAsB,EAAE,CAAC;gBAC9B,EAAE;gBACF,KAAI,CAAC,gBAAgB,CAAC,KAAI,CAAC,WAAW,EAAE,UAAC,YAAoC;oBACzE,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,KAAY,EAAE,eAA6B;wBACvG,IAAI,KAAK,EAAE;4BACP,EAAE,CAAC,KAAK,CAAC,gCAA8B,KAAI,CAAC,WAAW,SAAI,aAAa,CAAC,eAAe,qBAAkB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;4BAC3H,OAAO;yBACV;wBACD,8EAA8E;wBAC9E,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,gBAAgB,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;wBACxE,KAAI,CAAC,WAAW,GAAG,CAAC,CAAC;wBACrB,IAAI,OAAO,QAAQ,KAAK,UAAU;4BAAE,QAAQ,EAAE,CAAC;oBACnD,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,EAAC,kBAAkB;IAEpB,KAAK;IACG,8CAAsB,GAA9B;QACI,IAAM,UAAU,GAAW,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAC9E,KAAK,IAAM,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE;YAC/B,IAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAoB,CAAC;YACrD,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ;gBAAE,SAAS;YAC7C,IAAI,KAAK,SAAoB,CAAC;YAC9B,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBACzB,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAChC;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC9B,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;aACxC;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC/B,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aACtB;YACD,6BAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACvC;QACD,qFAAqF;IACzF,CAAC,EAAC,8BAA8B;IAEhC,KAAK;IACE,uCAAe,GAAtB,UAAuB,QAAoB;QAA3C,iBAoCC;QAnCG,IAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,IAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC;QACrE,EAAE;QACF,KAAK,IAAM,GAAG,IAAI,UAAU,EAAE;YAC1B,IAAI,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAChC,IAAM,IAAI,GAAsB,UAAU,CAAC,GAAG,CAAC,CAAC;gBAChD,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ;oBAAE,SAAS;gBAChD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAClB;SACJ;QACD;;iFAEyE;QACzE,EAAE;QACF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,YAAoC;YACzE,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,KAAY,EAAE,gBAAgC;gBACrF,OAAO,CAAC,GAAG,CAAC,kDAAkD,EAAE,gBAAgB,CAAC,CAAC;gBAClF,IAAI,KAAK,EAAE;oBACP,EAAE,CAAC,KAAK,CAAC,0EAA0E,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;oBACpG,OAAO;iBACV;gBACD,IAAI,UAAU,GAAmB,EAAE,CAAC;gBACpC,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC;oBAAE,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBACtF,yEAAyE;gBACzE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACtC,IAAI,OAAO,UAAU,CAAC,CAAC,CAAC,KAAK,QAAQ;wBAAE,SAAS;oBAChD,sDAAsD;oBACtD,IAAM,OAAO,GAAW,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBAC3C,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;iBACvC;gBACD,IAAI,OAAO,QAAQ,KAAK,UAAU;oBAAE,QAAQ,EAAE,CAAC;YACnD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,EAAC,uBAAuB;IAEzB,oDAAoD;IAC5C,oCAAY,GAApB,UAAqB,IAAY,EAAE,OAAe;QAC9C,2DAA2D;QAC3D,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,OAAO,KAAK,QAAQ;YAAE,OAAO;QACzF,uBAAuB;QACvB,IAAM,MAAM,GAAW;YACnB,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,QAAQ,EAAE,EAAE;YACZ,iBAAiB,EAAE,EAAE;SACxB,CAAC;QACF,mBAAmB;QACnB,IAAM,MAAM,GAAG,IAAI,qBAAS,EAAE,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,eAAe;QACf,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,IAAM,MAAM,GAAa,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;QAChD,IAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE;YACxD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,+FAA+F;SAClG;QACD,gBAAgB;QAChB,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,IAAM,QAAQ,GAAa,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;QAClD,aAAa;QACb,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,IAAM,KAAK,GAAa,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;QAC/C,YAAY;QACZ,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,IAAM,IAAI,GAAa,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;QAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;gBACnB,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACpC;SACJ;QACD,EAAE;QACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG;gBACb,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;gBACjB,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACpB,IAAI,EAAE,KAAK,CAAC,CAAC,CAAoB;gBACjC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK;aAC5B,CAAC;SACL;QACD,+DAA+D;QAC/D,gEAAgE;QAChE,kEAAkE;QAClE,4DAA4D;QAC5D,0DAA0D;QAC1D,+DAA+D;QAC/D,yDAAyD;QACzD,OAAO,MAAM,CAAC,IAAI,EAAE,EAAE;YAClB,IAAM,OAAO,GAAsB,EAAE,CAAC;YACtC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACjD,IAAM,MAAM,GAAgB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC/C,IAAM,KAAK,GAAW,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;gBACpD,4FAA4F;gBAC5F,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;oBACzB,uFAAuF;oBACvF,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,wBAAwB;oBACxD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;wBACpB,EAAE,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;qBACpF;oBACD,IAAM,IAAI,GAAW,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC/C,IAAM,IAAI,GAAW,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC/C,IAAM,KAAK,GAAW,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;oBAChD,IAAM,KAAK,GAAwB,EAAE,CAAC;oBACtC,+EAA+E;oBAC/E,KAAK,EAAE,CAAC;oBACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;wBAC3B,IAAI,IAAI,GAA2C,EAAE,CAAC;wBACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;4BAC3B,IAAM,KAAK,GAAgB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC9C,IAAM,UAAU,GAAG,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;4BACjD,IAAM,WAAW,GAAuB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAuB,EAAE,UAAU,CAAC,CAAC;4BAC3G,IAAI,IAAI,GAAG,CAAC,EAAE;gCACV,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;6BACnC;iCAAM;gCACH,IAAI,GAAG,WAAW,CAAC;6BACtB;4BACD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;4BAChB,KAAK,EAAE,CAAC;yBACX;qBACJ;oBACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;oBAC9B,KAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;oBAC/B,KAAK,EAAE,CAAC;iBACX;qBAAM;oBACH,IAAI,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;wBACjE,OAAO,CAAC,KAAK,CAAC,mCAAiC,MAAM,CAAC,IAAI,+BAA4B,CAAC,CAAC;wBACxF,OAAO;qBACV;oBACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;oBACpE;;;;;wBAKI;iBACP;aACJ;YACD,6BAA6B;YAC7B,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtD,IAAM,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;gBACvD,0CAA0C;gBAC1C,mEAAmE;gBACnE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;gBAChD,IAAI,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzC,OAAO,IAAI,GAAG,CAAC;iBAClB;aACJ;YACD,6GAA6G;YAC7G,6EAA6E;YAC7E,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,sCAAsC;SACzE,CAAC,aAAa;QACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;QAC5B,IAAI,IAAI,KAAK,iBAAiB;YAAE,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IACnG,CAAC,EAAC,oBAAoB;IAGtB,mEAAmE;IAC3D,0CAAkB,GAA1B,UAA2B,IAAqB,EAAE,KAAa;QAC3D,IAAI,IAAI,KAAK,QAAQ,EAAE;YACnB,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC1B;aAAM,IAAI,IAAI,KAAK,SAAS,EAAE;YAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;SACtC;aAAM,IAAI,IAAI,KAAK,OAAO,EAAE;YACzB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;SAC9C;aAAM,EAAE,qBAAqB;YAC1B,OAAO,KAAK,CAAC;SAChB;IACL,CAAC,EAAC,0BAA0B;IAE5B,KAAK;IACE,oCAAY,GAAnB,UAAoB,IAAY;QAAE,cAAiB;aAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;YAAjB,6BAAiB;;QAC/C,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,IAAI,CAAC;QACvE,IAAM,MAAM,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,EAAE;YACT,EAAE,CAAC,KAAK,CAAC,4CAA0C,IAAI,aAAU,CAAC,CAAC;YACnE,OAAO,IAAI,CAAC;SACf;QACD,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC;gBAAE,OAAO,IAAI,GAAG,CAAC;SAC3C;QACD,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YAAE,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtD,EAAE,CAAC,KAAK,CAAC,sDAAoD,IAAI,wCAAkC,OAAO,OAAG,CAAC,CAAC;QAC/G,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAuB;IAChB,uCAAe,GAAtB,UAAuB,KAA8C;QACjE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QACzD,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC/B,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACvC;QACD,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC;QAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,WAAW,GAAG,iBAAiB,CAAC,CAAC,CAAC,EAAE;gBACpC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aACxB;SACJ;QACD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACzB,CAAC,EAAC,uBAAuB;IAEzB,uBAAuB;IAChB,4CAAoB,GAA3B,UAA4B,KAAmB;QAC3C,iEAAiE;QACjE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,IAAI,CAAC;QAC5D,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC/B,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACvC;QACD,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC;QAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,WAAW,GAAG,iBAAiB,CAAC,CAAC,CAAC,EAAE;gBACpC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;aACnB;SACJ;QACD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,EAAC,4BAA4B;IAEvB,0CAAkB,GAAzB,UAA0B,IAAY;QAAE,cAAiB;aAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;YAAjB,6BAAiB;;QACrD,IAAM,MAAM,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE1C,IAAI,CAAC,MAAM,EAAE;YACT,EAAE,CAAC,KAAK,CAAC,iDAA+C,IAAI,YAAS,CAAC,CAAC;YACvE,OAAO,EAAE,CAAC;SACb;QACD,IAAI,OAAO,GAAW,EAAE,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;SAC5B;QACD,IAAI,SAAS,GAAuB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7D,IAAI,CAAC,SAAS,EAAE;YACZ,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,SAAS,GAAG,EAAE,CAAC;YAC1C,KAAK,IAAM,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE;gBAC3B,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,6BAA6B;oBAC3D,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;iBACpC;qBAAM,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,MAAM;iBACT;aACJ;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,KAAK;IACE,uCAAe,GAAtB,UAAuB,IAAY;QAC/B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC7B;QACD,EAAE,CAAC,KAAK,CAAC,+CAA6C,IAAI,aAAU,CAAC,CAAC;QACtE,OAAO,EAAY,CAAC;IACxB,CAAC;IAED,oCAAoC;IAC5B,wCAAgB,GAAxB,UAAyB,UAAkB,EAAE,QAAkD;QAC3F,IAAI,CAAC,UAAU,IAAI,OAAO,UAAU,KAAK,QAAQ;YAAE,OAAO;QAC1D,kDAAkD;QAClD,IAAM,MAAM,GAA2B,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC7E,IAAI,MAAM,EAAE;YACR,IAAI,OAAO,QAAQ,KAAK,UAAU;gBAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YACrD,OAAO;SACV;QACD,gDAAgD;QAChD,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,EAAE,UAAC,KAAY,EAAE,YAAoC;YACtF,IAAI,KAAK,EAAE;gBACP,EAAE,CAAC,KAAK,CAAC,4CAA0C,UAAU,qBAAkB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;aACnG;iBAAM;gBACH,EAAE,CAAC,GAAG,CAAC,4CAA0C,UAAU,2BAAwB,CAAC,CAAC;gBACrF,IAAI,OAAO,QAAQ,KAAK,UAAU;oBAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;aAC9D;QACL,CAAC,CAAC,CAAC;IACP,CAAC,EAAC,wBAAwB;IA5V1B,KAAK;IACU,uBAAS,GAAkB,IAAI,CAAC;IACvB,8BAAgB,GAAW,aAAa,CAAC;IACzC,6BAAe,GAAW,qBAAqB,CAAC;IAChD,4BAAc,GAAW,WAAW,CAAC;IACrC,2BAAa,GAAW,mBAAmB,CAAC;IAwVxE,oBAAC;CA9VD,AA8VC,IAAA;AA9VY,sCAAa","file":"","sourceRoot":"/","sourcesContent":["// @@\r\nimport { ConstantsData } from \"./ConstantsData\";\r\nimport { CsvReader } from \"./CsvReader\";\r\nimport { MapCell } from \"../../common/configs/mapcell\";\r\nimport { Build } from \"../../common/configs/build\";\r\nimport { ItemConfig } from \"../../common/configs/item\";\r\nimport { lvRandomConfig } from \"../../common/configs/lv_random\";\r\nimport { HeroConfig } from \"../../common/configs/hero\";\r\nimport { CaskConfig } from \"../../common/configs/cask\";\r\nimport { ShopConfig } from \"../../common/configs/shop\";\r\nimport { GuideConfig } from \"../../common/configs/guide\";\r\nimport { Special } from \"../../common/configs/special\";\r\nimport { SkillConfig } from \"../../common/configs/skill\";\r\nimport { StarConfig } from \"../../common/configs/star\";\r\n\r\nimport { PlayMap } from \"../../common/configs/playmap\";\r\nimport { PlayData } from \"../../common/configs/playdata\";\r\nimport { PlayCaves } from \"../../common/configs/playcaves\";\r\nimport { NamePool } from \"../../common/configs/name_pool\";\r\nimport { LadderBuildding } from \"../../common/configs/ladder_building\";\r\nimport { PoolConfig } from \"../../common/configs/pool\";\r\nimport { TaskConfig } from \"../../common/configs/task\";\r\nimport { BookConfig } from \"../../common/configs/books\";\r\nimport { FightMapItem } from \"../../fight/scripts/FightMapItem\";\r\nimport { DecorateConfig } from \"../../common/configs/decorate\";\r\nimport { LadderLVConfig } from \"../../common/configs/ladder_lv\";\r\nimport { LadderRewardConfig } from \"../../common/configs/ladder_reward\";\r\nimport { LadderAchievementConfig } from \"../../common/configs/ladder_achievement\";\r\nimport { SignConfig } from \"../../common/configs/sign\";\r\nimport { CavesLevel } from \"../../common/configs/caveslevel\";\r\nimport { RandomName } from \"../../common/configs/random_name\";\r\nimport { ConstantsConfig } from \"../../common/configs/constants\";\r\n// export class ConfigListConfig {};\r\n\r\n// @@\r\ntype CsvDataTypeBase = \"string\" | \"integer\" | \"number\" | \"float\";\r\ntype CsvDataTypeFull = CsvDataTypeBase | \"array\";\r\n\r\n// @@\r\ninterface IConfigHead {\r\n    field: string;\r\n    comment: string;\r\n    type: CsvDataTypeFull;\r\n    is_key: boolean;\r\n}\r\n\r\n// @@\r\ntype ConfigDataTypeBase = string | number; // bổ sung boolean nếu các file csv có dữ liệu boolean.\r\ntype ConfigDataTypeObj = Record<string, ConfigDataTypeBase>;\r\ntype ConfigDataTypeArray = Array<ConfigDataTypeBase | ConfigDataTypeObj>;\r\n\r\n// @\r\nexport type TConfigDataObject = Record<string, ConfigDataTypeBase | ConfigDataTypeArray>;\r\nexport interface RowDataArray {\r\n    id: number;\r\n    prop: number;\r\n    section_a: number;\r\n    section_b: number;\r\n    weight: number;\r\n}\r\nexport class Config {\r\n    head: IConfigHead[] = [];\r\n    data: MapCell | Record<string, Build> | Record<string, ItemConfig> | lvRandomConfig | HeroConfig | CaskConfig | Record<number, ShopConfig> | GuideConfig | Special | SkillConfig | StarConfig | ConstantsConfig;\r\n    data_set: Record<string, ConfigDataObject[]> = {};\r\n    primary_key_array: number[] = [];\r\n}\r\n\r\nexport type ConfigDataObject = PlayMap | PlayData | PlayCaves | NamePool | LadderBuildding | PoolConfig | TaskConfig\r\nexport type ConfigData = HeroConfig | BookConfig | StarConfig | SkillConfig | Build | FightMapItem | DecorateConfig | ItemConfig | LadderLVConfig | LadderBuildding | LadderRewardConfig | LadderAchievementConfig | ShopConfig | SignConfig | CavesLevel | RandomName | TaskConfig\r\n// @@ !!! type of cases\r\nexport class ConfigManager {\r\n    // @@\r\n    private static _instance: ConfigManager = null;\r\n    private static readonly config_list_name: string = \"config_list\";\r\n    private static readonly config_list_url: string = \"configs/config_list\";\r\n    private static readonly constants_name: string = \"constants\";\r\n    private static readonly constants_url: string = \"configs/constants\";\r\n\r\n    // @@\r\n    private readonly BUNDLE_NAME: string = \"common\";\r\n    private readonly _config: Record<string, Config> = {};\r\n    private _init_state: (0 | 1 | 2) = 0;\r\n\r\n    // @@\r\n    public static get instance(): ConfigManager {\r\n        if (!this._instance) this._instance = new ConfigManager();\r\n        return this._instance;\r\n    }\r\n\r\n    // @@\r\n    public async_init(callback: () => void): void {\r\n        if (this._init_state > 0) return;\r\n        this._init_state = 1;\r\n        this.async_get_bundle(this.BUNDLE_NAME, (loadedBundle: cc.AssetManager.Bundle) => {\r\n            loadedBundle.load(ConfigManager.constants_url, cc.TextAsset, (error: Error, loadedTextAsset: cc.TextAsset) => {\r\n                if (error) {\r\n                    cc.error(`AssetManager.Bundle: load [${this.BUNDLE_NAME}/${ConfigManager.constants_url}] assets failed,`, error.message);\r\n                    return;\r\n                }\r\n                // console.log(\"ConfigManager->async_ini: loadedTextAsset:\", loadedTextAsset);\r\n                this.parse_config(ConfigManager.constants_name, loadedTextAsset.text);\r\n                this.parse_constants_config();\r\n                //\r\n                this.async_get_bundle(this.BUNDLE_NAME, (loadedBundle: cc.AssetManager.Bundle) => {\r\n                    loadedBundle.load(ConfigManager.config_list_url, cc.TextAsset, (error: Error, loadedTextAsset: cc.TextAsset) => {\r\n                        if (error) {\r\n                            cc.error(`AssetManager.Bundle: load [${this.BUNDLE_NAME}/${ConfigManager.config_list_url}] assets failed,`, error.message);\r\n                            return;\r\n                        }\r\n                        // console.log(\"ConfigManager->async_ini: config_list_url:\", loadedTextAsset);\r\n                        this.parse_config(ConfigManager.config_list_name, loadedTextAsset.text);\r\n                        this._init_state = 2;\r\n                        if (typeof callback === \"function\") callback();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } // end: async_init\r\n\r\n    // @@\r\n    private parse_constants_config(): void {\r\n        const configData: Config = this.get_config_data(ConfigManager.constants_name);\r\n        for (const key in configData.data) {\r\n            const item = configData.data[key] as ConstantsConfig;\r\n            if (typeof item.value !== \"string\") continue;\r\n            let value: ConfigDataTypeBase;\r\n            if (item.type === \"integer\") {\r\n                value = parseInt(item.value);\r\n            } else if (item.type === \"float\") {\r\n                value = parseInt(item.value) / 10000;\r\n            } else if (item.type === \"string\") {\r\n                value = item.value;\r\n            }\r\n            ConstantsData.instance[key] = value;\r\n        }\r\n        // cc.log(\"parse_constants_config: ConstantsData.instance:\", ConstantsData.instance);\r\n    } // end: parse_constants_config\r\n\r\n    // @@\r\n    public load_all_config(callback: () => void): void {\r\n        const keys: string[] = [];\r\n        const loadUrls: string[] = [];\r\n        const configList = this._config[ConfigManager.config_list_name].data;\r\n        //\r\n        for (const key in configList) {\r\n            if (configList.hasOwnProperty(key)) {\r\n                const item: TConfigDataObject = configList[key];\r\n                if (typeof item.load_url !== \"string\") continue;\r\n                loadUrls.push(item.load_url);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        /* console.log(\"ConfigManager->load_all_config:keys:\", keys, keys.length);\r\n        console.log(\"ConfigManager->load_all_config:loadUrls:\", loadUrls, loadUrls.length);\r\n        console.log(\"ConfigManager->load_all_config:configList:\", configList); */\r\n        //\r\n        this.async_get_bundle(this.BUNDLE_NAME, (loadedBundle: cc.AssetManager.Bundle) => {\r\n            loadedBundle.load(loadUrls, cc.TextAsset, (error: Error, loadedTextAssets: cc.TextAsset[]) => {\r\n                console.log(\"ConfigManager->load_all_config:loadedTextAssets:\", loadedTextAssets);\r\n                if (error) {\r\n                    cc.error(`ConfigManager->load_all_config->AssetManager.Bundle: load assets failed,`, error.message);\r\n                    return;\r\n                }\r\n                let assetArray: cc.TextAsset[] = [];\r\n                if (Array.isArray(loadedTextAssets)) assetArray = assetArray.concat(loadedTextAssets);\r\n                // console.log(\"ConfigManager->load_all_config:assetArray:\", assetArray);\r\n                for (let i = 0; i < loadUrls.length; i++) {\r\n                    if (typeof assetArray[i] !== \"object\") continue;\r\n                    // if (keys[i] !== \"HeroConfigData\") continue; // test\r\n                    const content: string = assetArray[i].text;\r\n                    this.parse_config(keys[i], content);\r\n                }\r\n                if (typeof callback === \"function\") callback();\r\n            });\r\n        });\r\n    } // end: load_all_config\r\n\r\n    // @@ (chuyển csv content string sang Config object)\r\n    private parse_config(name: string, content: string): void {\r\n        // console.log(\"ConfigManager->parse_config:11111:\", name);\r\n        if (!name || !content || typeof name !== \"string\" || typeof content !== \"string\") return;\r\n        // create config object\r\n        const config: Config = {\r\n            head: [],\r\n            data: {},\r\n            data_set: {},\r\n            primary_key_array: []\r\n        };\r\n        // create CsvReader\r\n        const reader = new CsvReader();\r\n        reader.init(content);\r\n        // read headers\r\n        reader.next();\r\n        const fields: string[] = reader.rs.fieldsCopy();\r\n        const headers: string[] = [];\r\n        for (let i = 0; i < fields.length && fields[i] !== \"\"; i++) {\r\n            headers.push(fields[i]);\r\n            // nếu field (dòng đầu tiên) có 1 cột để trống sẽ gây ra lỗi sai vị trí cột các dòng tiếp theo.\r\n        }\r\n        // read comments\r\n        reader.next();\r\n        const comments: string[] = reader.rs.fieldsCopy();\r\n        // read types\r\n        reader.next();\r\n        const types: string[] = reader.rs.fieldsCopy();\r\n        // read keys\r\n        reader.next();\r\n        const keys: string[] = reader.rs.fieldsCopy();\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (keys[i] === \"key\") {\r\n                config.primary_key_array.push(i);\r\n            }\r\n        }\r\n        //\r\n        for (let i = 0; i < headers.length; i++) {\r\n            config.head[i] = {\r\n                field: headers[i],\r\n                comment: comments[i],\r\n                type: types[i] as CsvDataTypeFull,\r\n                is_key: keys[i] === \"key\"\r\n            };\r\n        }\r\n        //  console.log(\"ConfigManager->parse_config:fields:\", fields);\r\n        // console.log(\"ConfigManager->parse_config:headers:\", headers);\r\n        // console.log(\"ConfigManager->parse_config:comments:\", comments);\r\n        // console.log(\"ConfigManager->parse_config:types:\", types);\r\n        // console.log(\"ConfigManager->parse_config:keys:\", keys);\r\n        // console.log(\"ConfigManager->parse_config:config:\", config); \r\n        // xử lý các hàng dữ liệu tiếp theo [sau keys] trong csv.\r\n        while (reader.next()) {\r\n            const rowData: TConfigDataObject = {};\r\n            for (let index = 0; index < headers.length; index++) {\r\n                const header: IConfigHead = config.head[index];\r\n                const value: string = reader.rs.field(index).trim();\r\n                // console.log(\"config rowData[field, type, value]----:\", header.field, header.type, value);\r\n                if (header.type === \"array\") {\r\n                    // console.log(\"ConfigManager->parse_config:array--------------:\", name, header.field);\r\n                    const parts = value.split(\"|\"); // e.g: \"0|1|2\", \"2|1|2\"\r\n                    if (parts.length !== 3) {\r\n                        cc.error(\"ConfigManager->parse_config: array type field must have three values\");\r\n                    }\r\n                    const rows: number = parseInt(parts[0].trim());\r\n                    const cols: number = parseInt(parts[1].trim());\r\n                    const depth: number = parseInt(parts[2].trim());\r\n                    const array: ConfigDataTypeArray = [];\r\n                    // if (cols > 1) console.log(\"ConfigManager->parse_config:array:cols:\", value);\r\n                    index++;\r\n                    for (let j = 0; j < rows; j++) {\r\n                        let item: ConfigDataTypeBase | ConfigDataTypeObj = {};\r\n                        for (let k = 0; k < cols; k++) {\r\n                            const field: IConfigHead = config.head[index];\r\n                            const fieldValue = reader.rs.field(index).trim();\r\n                            const parsedValue: ConfigDataTypeBase = this.parse_simple_field(field.type as CsvDataTypeBase, fieldValue);\r\n                            if (cols > 1) {\r\n                                item[field.field] = parsedValue;\r\n                            } else {\r\n                                item = parsedValue;\r\n                            }\r\n                            array[j] = item;\r\n                            index++;\r\n                        }\r\n                    }\r\n                    rowData[header.field] = array;\r\n                    index += (depth - rows) * cols;\r\n                    index--;\r\n                } else {\r\n                    if (![\"string\", \"integer\", \"number\", \"float\"].includes(header.type)) {\r\n                        console.error(`ConfigManager->parse_config: [${header.type}] unsupported field types!`);\r\n                        return;\r\n                    }\r\n                    rowData[header.field] = this.parse_simple_field(header.type, value);\r\n                    /* if (name === \"HeroConfigData\" && header.field === \"attack_anim_time\") {\r\n                        console.log(\"test111111-------------------------:\", rowData[header.field], value);\r\n                        if (Number.isNaN(rowData[header.field])) {\r\n                            console.log(\"test2222-------------------------:\", rowData[header.field], value);\r\n                        }\r\n                    } */\r\n                }\r\n            }\r\n            // check dataKey, primary key\r\n            let dataKey = \"\";\r\n            for (let i = 0; i < config.primary_key_array.length; i++) {\r\n                const keyIndex = config.primary_key_array[i]; // e.g: 0\r\n                // config.head[keyIndex].field e.g: \"name\"\r\n                // rowData[config.head[keyIndex].field] e.g: \"CLOSE_BTN_DELAY_TIME\"\r\n                dataKey += rowData[config.head[keyIndex].field];\r\n                if (i < config.primary_key_array.length - 1) {\r\n                    dataKey += \"@\";\r\n                }\r\n            }\r\n            // tối thiểu phải có 1 primary key: e.g: \"CLOSE_BTN_DELAY_TIME\", 2 primary key: e.g: \"CLOSE_BTN_DELAY_TIME@1\"\r\n            // if (name === \"HeroConfigData\") console.log(\"dataKey----:\", name, dataKey);\r\n            config.data[dataKey] = rowData; // dataKey e.g: \"CLOSE_BTN_DELAY_TIME\"\r\n        } // end: while\r\n        this._config[name] = config;\r\n        if (name === \"GuideConfigData\") console.log(\"ConfigManager->parse_config:2222:\", name, config);\r\n    } // end: parse_config\r\n\r\n\r\n    // @@ (nếu type là \"number|integer|float\" value rỗng sẽ trả về NaN)\r\n    private parse_simple_field(type: CsvDataTypeBase, value: string): ConfigDataTypeBase {\r\n        if (type === \"number\") {\r\n            return parseInt(value);\r\n        } else if (type === \"integer\") {\r\n            return Math.floor(parseInt(value));\r\n        } else if (type === \"float\") {\r\n            return Math.floor(parseInt(value)) / 10000;\r\n        } else { // type === \"string\";\r\n            return value;\r\n        }\r\n    } // end: parse_simple_field\r\n\r\n    // @@\r\n    public get_row_data(name: string, ...keys: string[]): ConfigData | null {\r\n        if (!name || typeof name !== \"string\" || keys.length <= 0) return null;\r\n        const config: Config = this._config[name];\r\n        if (!config) {\r\n            cc.error(`ConfigManager->get_row_data: not find [${name}] config`);\r\n            return null;\r\n        }\r\n        let dataKey = \"\";\r\n        for (let i = 0; i < keys.length; i++) {\r\n            dataKey += keys[i];\r\n            if (i < keys.length - 1) dataKey += \"@\";\r\n        }\r\n        if (config.data[dataKey]) return config.data[dataKey];\r\n        cc.error(`ConfigManager->get_row_data: not find data from [${name}] config which primary key is \"${dataKey}\"`);\r\n        return null;\r\n    }\r\n\r\n    // @@ !!! type of cases\r\n    public get_random_case(cases: Array<{ weight: number; prop: number }>): number {\r\n        if (!Array.isArray(cases) || cases.length <= 0) return 0;\r\n        let totalWeight = 0;\r\n        const cumulativeWeights: number[] = [];\r\n        for (let i = 0; i < cases.length; i++) {\r\n            totalWeight += cases[i].weight;\r\n            cumulativeWeights.push(totalWeight);\r\n        }\r\n        const randomValue = Math.random() * totalWeight;\r\n        for (let i = 0; i < cumulativeWeights.length; i++) {\r\n            if (randomValue < cumulativeWeights[i]) {\r\n                return cases[i].prop;\r\n            }\r\n        }\r\n        return cases[0].prop;\r\n    } // end: get_random_case\r\n\r\n    // @@ !!! type of cases\r\n    public get_random_case_data(cases: PoolConfig[]): PoolConfig {\r\n        // public get_random_case_data(cases: TConfigDataObject[]): any {\r\n        if (!Array.isArray(cases) || cases.length <= 0) return null;\r\n        let totalWeight = 0;\r\n        const cumulativeWeights: number[] = [];\r\n        for (let i = 0; i < cases.length; i++) {\r\n            totalWeight += cases[i].weight;\r\n            cumulativeWeights.push(totalWeight);\r\n        }\r\n        const randomValue = Math.random() * totalWeight;\r\n        for (let i = 0; i < cumulativeWeights.length; i++) {\r\n            if (randomValue < cumulativeWeights[i]) {\r\n                return cases[i];\r\n            }\r\n        }\r\n        return cases[0];\r\n    } // end: get_random_case_data\r\n\r\n    public get_row_data_array(name: string, ...keys: string[]): ConfigDataObject[] {\r\n        const config: Config = this._config[name];\r\n\r\n        if (!config) {\r\n            cc.error(`ConfigManager->get_row_data_array: not find ${name} config`);\r\n            return [];\r\n        }\r\n        let dataKey: string = \"\";\r\n        for (let i = 0; i < keys.length; i++) {\r\n            dataKey += keys[i] + \"@\";\r\n        }\r\n        let dataArray: ConfigDataObject[] = config.data_set[dataKey];\r\n        if (!dataArray) {\r\n            config.data_set[dataKey] = dataArray = [];\r\n            for (const key in config.data) {\r\n                if (key.indexOf(dataKey) === 0) { // or key.startsWith(dataKey)\r\n                    dataArray.push(config.data[key]);\r\n                } else if (dataArray.length > 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return dataArray;\r\n    }\r\n\r\n    // @@\r\n    public get_config_data(name: string): Config {\r\n        if (this._config[name]) {\r\n            return this._config[name];\r\n        }\r\n        cc.error(`ConfigManager->get_config_data: not find [${name}] config`);\r\n        return {} as Config;\r\n    }\r\n\r\n    // @@ (giống Utils.async_get_bundle)\r\n    private async_get_bundle(bundleName: string, callback: (bundle: cc.AssetManager.Bundle) => void): void {\r\n        if (!bundleName || typeof bundleName !== \"string\") return;\r\n        // cc.assetManager.getBundle: Lấy gói đã được tải.\r\n        const bundle: cc.AssetManager.Bundle = cc.assetManager.getBundle(bundleName);\r\n        if (bundle) {\r\n            if (typeof callback === \"function\") callback(bundle);\r\n            return;\r\n        }\r\n        // tải gói (bundle) từ một URL hoặc một thư mục.\r\n        cc.assetManager.loadBundle(bundleName, (error: Error, loadedBundle: cc.AssetManager.Bundle) => {\r\n            if (error) {\r\n                cc.error(`ConfigManager->async_get_bundle: load [${bundleName}] bundle failed,`, error.message);\r\n            } else {\r\n                cc.log(`ConfigManager->async_get_bundle: load [${bundleName}] bundle successfully.`);\r\n                if (typeof callback === \"function\") callback(loadedBundle);\r\n            }\r\n        });\r\n    } // end: async_get_bundle\r\n}\r\n"]}