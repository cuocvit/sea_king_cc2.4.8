{"version":3,"sources":["assets\\start-scene\\scripts\\ParabolaPath.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["class ParabolaPath {\r\n    private m_start: cc.Vec3;\r\n    private m_end: cc.Vec3;\r\n    private m_height: number;\r\n    private m_gravity: number;\r\n    private m_upTime: number;\r\n    private m_downTime: number;\r\n    private m_totalTime: number;\r\n    private m_velocityStart: cc.Vec3;\r\n    private m_position: cc.Vec3;\r\n    private m_time: number;\r\n    public isClampStartEnd: boolean = false;\r\n\r\n    constructor(startPoint: cc.Vec3, endPoint: cc.Vec3, height: number, gravity: number = -9.8) {\r\n        this.init(startPoint, endPoint, height, gravity);\r\n    }\r\n\r\n    private init(startPoint: cc.Vec3, endPoint: cc.Vec3, height: number = 10, gravity: number = -9.8): void {\r\n        let peakY: number = Math.max(startPoint.y, endPoint.y) + height;\r\n        const startHeight: number = peakY - startPoint.y;\r\n        const endHeight: number = peakY - endPoint.y;\r\n        const gravityFactor: number = 2 / -gravity;\r\n        const upTime: number = Math.sqrt(gravityFactor * startHeight);\r\n        const downTime: number = Math.sqrt(gravityFactor * endHeight);\r\n        const horizontalVelocityX: number = (endPoint.x - startPoint.x) / (peakY = upTime + downTime);\r\n        const horizontalVelocityZ: number = (endPoint.z - startPoint.z) / peakY;\r\n        const verticalVelocity: number = -gravity * upTime;\r\n\r\n        this.m_start = startPoint;\r\n        this.m_end = endPoint;\r\n        this.m_height = height;\r\n        this.m_gravity = gravity;\r\n        this.m_upTime = upTime;\r\n        this.m_downTime = downTime;\r\n        this.m_totalTime = peakY;\r\n        this.m_velocityStart = new cc.Vec3(horizontalVelocityX, verticalVelocity, horizontalVelocityZ);\r\n        this.m_position = this.m_start;\r\n        this.m_time = 0;\r\n    }\r\n\r\n    public get start(): cc.Vec3 {\r\n        return this.m_start;\r\n    }\r\n\r\n    public get end(): cc.Vec3 {\r\n        return this.m_end;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.m_height;\r\n    }\r\n\r\n    public get gravity(): number {\r\n        return this.m_gravity;\r\n    }\r\n\r\n    public get upTime(): number {\r\n        return this.m_upTime;\r\n    }\r\n\r\n    public get downTime(): number {\r\n        return this.m_downTime;\r\n    }\r\n\r\n    public get totalTime(): number {\r\n        return this.m_totalTime;\r\n    }\r\n\r\n    public get top(): cc.Vec3 {\r\n        return this.getPosition(this.m_upTime);\r\n    }\r\n\r\n    public get velocityStart(): cc.Vec3 {\r\n        return this.m_velocityStart;\r\n    }\r\n\r\n    public get position(): cc.Vec3 {\r\n        return this.m_position;\r\n    }\r\n\r\n    public get velocity(): cc.Vec3 {\r\n        return this.getVelocity(this.m_time);\r\n    }\r\n\r\n    public get time(): number {\r\n        return this.m_time;\r\n    }\r\n\r\n    public set time(num: number) {\r\n        if (this.isClampStartEnd) {\r\n            num = cc.misc.clampf(num, 0, this.m_totalTime);\r\n        }\r\n        this.m_time = num;\r\n        this.m_position = this.getPosition(num);\r\n    }\r\n\r\n    public getPosition(time: number): cc.Vec3 {\r\n        if (time === 0) return this.m_start;\r\n        if (time === this.m_totalTime) return this.m_end;\r\n        const displacementY: number = 0.5 * this.m_gravity * time * time;\r\n        return this.m_start.add(this.m_velocityStart.clone().multiplyScalar(time)).add(new cc.Vec3(0, displacementY, 0));\r\n    }\r\n\r\n    private getVelocity(time: number): cc.Vec3 {\r\n        return time === 0 ? this.m_velocityStart : this.m_velocityStart.add(new cc.Vec3(0, this.m_velocityStart.y + this.m_gravity * time, 0));\r\n    }\r\n}\r\n\r\nexport { ParabolaPath };"]}