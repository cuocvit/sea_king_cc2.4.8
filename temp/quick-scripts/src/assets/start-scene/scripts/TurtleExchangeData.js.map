{"version":3,"sources":["assets\\start-scene\\scripts\\TurtleExchangeData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,6CAA4C;AAC5C,6CAAmC;AACnC,yCAA2C;AAE3C,IAAI;AACJ;IAAA;QACW,YAAO,GAAW,CAAC,CAAC;QACpB,aAAQ,GAAW,CAAC,CAAC;QACrB,qBAAgB,GAAW,wBAAY,CAAC,WAAW,CAAC;QACpD,sBAAiB,GAAW,CAAC,CAAC;QAC9B,UAAK,GAAW,CAAC,CAAC;IAC7B,CAAC;IAAD,6BAAC;AAAD,CANA,AAMC,IAAA;AANY,wDAAsB;AAQnC,IAAI;AACJ;IAAwC,sCAAW;IAM/C,IAAI;IACJ;QAAA,YACI,iBAAO,SAGV;QAFG,KAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC;QACxC,KAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;;IAChC,CAAC;IAED,IAAI;IACG,4CAAe,GAAtB,UAAuB,QAA8B;QAArD,iBASC;QARG,iBAAM,eAAe,YAAC,UAAC,IAAI;YACvB,IAAI,CAAC,KAAI,CAAC,OAAO,EAAE;gBACf,KAAI,CAAC,kBAAkB,GAAG,gBAAE,CAAC,KAAK,CAAC,iCAAiC,CAAC;gBACrE,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,KAAI,CAAC,gBAAgB,EAAE,CAAC;aAC3B;YACD,IAAI,QAAQ;gBAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,IAAI;IACG,6CAAgB,GAAvB,UAAwB,QAAqB;QACzC,gBAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QACjE,iBAAM,gBAAgB,YAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,IAAI;IACG,2DAA8B,GAArC;QACI,IAAM,iBAAiB,GAAG,kBAAkB,CAAC,0BAA0B,CAAC;QACxE,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAE,CAAC,KAAK,CAAC,+BAA+B,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtE,IAAM,QAAQ,GAAG,gBAAE,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;gBAC7D,IAAM,OAAO,GAAG,IAAI,sBAAsB,EAAE,CAAC;gBAC7C,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;gBACnC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;gBACrC,OAAO,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC;gBACrD,OAAO,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;gBACvD,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACnC;SACJ;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAM,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,GAAG,gBAAE,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/F;QAED,OAAO,iBAAiB,CAAC;IAC7B,CAAC;IAnDa,oCAAiB,GAAW,6BAA6B,CAAC;IAC1D,6CAA0B,GAA6B,EAAE,CAAC;IAmD5E,yBAAC;CArDD,AAqDC,CArDuC,yBAAW,GAqDlD;AArDY,gDAAkB","file":"","sourceRoot":"/","sourcesContent":["import { StorageBase } from './StorageBase';\r\nimport { gm } from './GameManager';\r\nimport { RewardIdEnum } from './Constants';\r\n\r\n// @\r\nexport class TurtleExchangeItemData {\r\n    public prop_id: number = 0;\r\n    public prop_num: number = 0;\r\n    public exchange_prop_id: number = RewardIdEnum.GOLD_BARREL;\r\n    public exchange_prop_num: number = 1;\r\n    public state: number = 0;\r\n}\r\n\r\n// @\r\nexport class TurtleExchangeData extends StorageBase {\r\n    public static EVENT_DATA_CHANGE: string = \"turtle_exchange_data_change\";\r\n    public static turtle_exchange_data_array: TurtleExchangeItemData[] = [];\r\n    //\r\n    public left_refresh_count: number;\r\n\r\n    // @\r\n    constructor() {\r\n        super();\r\n        this.STORAGE_KEY = \"TurtleExchangeData\";\r\n        this.left_refresh_count = 0;\r\n    }\r\n\r\n    // @\r\n    public async_read_data(callback?: (data: any) => void): void {\r\n        super.async_read_data((data) => {\r\n            if (!this.is_init) {\r\n                this.left_refresh_count = gm.const.TURTLE_EXCHANGE_MAX_REFRESH_COUNT;\r\n                this.is_init = true;\r\n                this.async_write_data();\r\n            }\r\n            if (callback) callback(data);\r\n        });\r\n    }\r\n\r\n    // @\r\n    public async_write_data(callback?: () => void): void {\r\n        gm.data.event_emitter.emit(TurtleExchangeData.EVENT_DATA_CHANGE);\r\n        super.async_write_data(callback);\r\n    }\r\n\r\n    // @\r\n    public get_turtle_exchange_data_array(): TurtleExchangeItemData[] {\r\n        const exchangeDataArray = TurtleExchangeData.turtle_exchange_data_array;\r\n        if (exchangeDataArray.length === 0) {\r\n            for (let i = 0; i < gm.const.TURTLE_EXCHANGE_ITEM_DATA_ARRAY.length; i++) {\r\n                const itemData = gm.const.TURTLE_EXCHANGE_ITEM_DATA_ARRAY[i];\r\n                const newItem = new TurtleExchangeItemData();\r\n                newItem.prop_id = itemData.prop_id;\r\n                newItem.prop_num = itemData.prop_num;\r\n                newItem.exchange_prop_id = itemData.exchange_prop_id;\r\n                newItem.exchange_prop_num = itemData.exchange_prop_num;\r\n                exchangeDataArray.push(newItem);\r\n            } \r\n        }\r\n\r\n        for (let i = 0; i < exchangeDataArray.length; i++) {\r\n            const item = exchangeDataArray[i];\r\n            item.state = gm.data.mapCell_data.getMertrailIDCount(item.prop_id) >= item.prop_num ? 1 : 0;\r\n        }\r\n\r\n        return exchangeDataArray;\r\n    }\r\n}\r\n"]}