{"version":3,"sources":["assets\\start-scene\\scripts\\EventEmitter.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// @@\r\ninterface IEventListener {\r\n    callback: CallbackType;\r\n    target: object;\r\n    isOnce: boolean;\r\n}\r\n\r\n// @@\r\ntype EventArgsType = number | string | boolean | object;\r\nexport type CallbackType = (...args: EventArgsType[]) => void;\r\n\r\n// @@\r\nexport class EventEmitter {\r\n    private readonly _events: Record<string, IEventListener[]>;\r\n\r\n    // @@\r\n    public constructor() {\r\n        this._events = {};\r\n    }\r\n\r\n    // @@\r\n    public emit(eventName: string, ...args: EventArgsType[]): void {\r\n        const listeners: IEventListener[] = this._events[eventName];\r\n        if (!Array.isArray(listeners)) return;\r\n        for (let i = listeners.length - 1; i >= 0; i--) {\r\n            const listener: IEventListener = listeners[i];\r\n            if (typeof listener.callback === \"function\" && listener.target) {\r\n                listener.callback.apply(listener.target, args);\r\n                if (listener.isOnce) listeners.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // @@\r\n    public on(eventName: string, callback: CallbackType, target: object): void {\r\n        this._addListener(eventName, callback, target);\r\n    }\r\n\r\n    // @@ (not used)\r\n    public once(eventName: string, callback: CallbackType, target: object): void {\r\n        this._addListener(eventName, callback, target, true);\r\n    }\r\n\r\n    // @@\r\n    public off(eventName: string, callback: CallbackType, target?: object): void {\r\n        const listeners: IEventListener[] = this._events[eventName];\r\n        if (!Array.isArray(listeners)) return;\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback && listeners[i].target === target) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // @@ (not used)\r\n    public count(eventName: string): number {\r\n        return (this._events[eventName] || []).length;\r\n    }\r\n\r\n    // @@\r\n    private _addListener(eventName: string, callback: CallbackType, target: object, isOnce: boolean = false): void {\r\n        if (!eventName || typeof eventName !== \"string\" || typeof callback !== \"function\" || !target || typeof target !== \"object\") return;\r\n        const listeners: IEventListener[] = this._events[eventName] || [];\r\n        for (const listener of listeners) {\r\n            if (listener.callback === callback && listener.target === target) {\r\n                console.log(\"Do not register listeners repeatedly\"); // 不要重复注册监听\r\n                return;\r\n            }\r\n        }\r\n        listeners.unshift({ callback, target, isOnce });\r\n        this._events[eventName] = listeners;\r\n    }\r\n}\r\n"]}