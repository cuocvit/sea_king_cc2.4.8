{"version":3,"sources":["assets\\test\\scripts\\SpinePlayer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { BundleName } from '../../start-scene/scripts/Constants';\r\nimport { gm } from '../../start-scene/scripts/GameManager';\r\nimport { NodePoolItem } from '../../start-scene/scripts/NodePoolItem';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nclass SpinePlayer extends cc.Component {\r\n    @property(cc.EditBox)\r\n    private bundle_name_edit: cc.EditBox = null;\r\n\r\n    @property(cc.EditBox)\r\n    private spine_url_edit: cc.EditBox = null;\r\n\r\n    @property(cc.EditBox)\r\n    private skin_edit: cc.EditBox = null;\r\n\r\n    @property(cc.EditBox)\r\n    private animation_edit: cc.EditBox = null;\r\n\r\n    @property(cc.EditBox)\r\n    private time_scale_edit: cc.EditBox = null;\r\n\r\n    @property(cc.Toggle)\r\n    private loop_tog: cc.Toggle = null;\r\n\r\n    @property(cc.Label)\r\n    private duration_lbl: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    private current_time_lbl: cc.Label = null;\r\n\r\n    @property(cc.Slider)\r\n    private timeline_sld: cc.Slider = null;\r\n\r\n    @property(cc.Node)\r\n    private spine_node: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    private flag_node: cc.Node = null;\r\n\r\n    @property(cc.EditBox)\r\n    private flag_edit: cc.EditBox = null;\r\n\r\n    @property(cc.Button)\r\n    private load_btn: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    private play_btn: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    private pause_btn: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    private resume_btn: cc.Button = null;\r\n\r\n    private _spine: sp.Skeleton | null = null;\r\n    private _spine_track: sp.spine.TrackEntry | null = null;\r\n\r\n    protected onEnable(): void {\r\n        this.flag_node.on(cc.Node.EventType.TOUCH_END, this.on_touch_end_handler, this);\r\n        this.flag_node.on(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move_handler, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        this.flag_node.off(cc.Node.EventType.TOUCH_END, this.on_touch_end_handler, this);\r\n        this.flag_node.off(cc.Node.EventType.TOUCH_MOVE, this.on_touch_move_handler, this);\r\n    }\r\n\r\n    private on_touch_move_handler(event: cc.Event.EventTouch): void {\r\n        this.flag_node.position = this.flag_node.position.add(cc.v3(event.getDelta()));\r\n        this.flag_edit.string = `${Math.floor(this.flag_node.x)},${Math.floor(this.flag_node.y)}`;\r\n    }\r\n\r\n    private on_touch_end_handler(): void {\r\n        this.flag_edit.string = `${Math.floor(this.flag_node.x)},${Math.floor(this.flag_node.y)}`;\r\n    }\r\n\r\n    private on_editor_button_click_handler(event: cc.Event.EventTouch): void {\r\n        const target = event.target;\r\n        if (target == this.load_btn.node) {\r\n            gm.pool.put_children(this.spine_node);\r\n            if (this.spine_node.childrenCount == 0) {\r\n                gm.pool.async_get(\r\n                    this.bundle_name_edit.string.trim() as BundleName,\r\n                    this.spine_url_edit.string.trim(),\r\n                    NodePoolItem,\r\n                    (item: NodePoolItem) => {\r\n                        if (this.spine_node.childrenCount == 0) {\r\n                            this.spine_node.addChild(item.node);\r\n                            this._spine = item.getComponent(sp.Skeleton);\r\n                            this.do_play();\r\n                        } else {\r\n                            gm.pool.put_children(this.spine_node);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        } else if (target == this.play_btn.node) {\r\n            this.do_play();\r\n        } else if (target == this.pause_btn.node && this._spine_track) {\r\n            this._spine_track.timeScale = 0;\r\n        } else if (target == this.resume_btn.node && this._spine_track) {\r\n            this._spine_track.timeScale = 1;\r\n        }\r\n    }\r\n\r\n    private do_play(): void {\r\n        if (!this._spine) return;\r\n        cc.director.getScheduler().setTimeScale(gm.const.FIGHT_SPEED_X2);\r\n        const animationName = this.animation_edit.string.trim();\r\n        this._spine.setSkin(this.skin_edit.string.trim());\r\n        this._spine.timeScale = parseInt(this.time_scale_edit.string.trim());\r\n        this._spine_track = this._spine.setAnimation(0, animationName, this.loop_tog.isChecked);\r\n        this.duration_lbl.string = `${this._spine_track.animation.duration.toFixed(2)}s`;\r\n        this.timeline_sld.progress = 0;\r\n        this.current_time_lbl.string = \"0s\";\r\n    }\r\n\r\n    private move_to_time(time: number): void {\r\n        if (this._spine_track) {\r\n            this._spine_track.timeScale = 0;\r\n            this._spine_track.trackTime = time;\r\n        }\r\n    }\r\n\r\n    private on_slide_change_handler(): void {\r\n        if (this._spine_track) {\r\n            const time = this.timeline_sld.progress * this._spine_track.animation.duration;\r\n            this.move_to_time(time);\r\n            this.current_time_lbl.string = `${time.toFixed(2)}s`;\r\n        }\r\n    }\r\n\r\n    private stopAtFrame(frame: number): void {\r\n        const currentTrackEntry = this._spine.getCurrent(0);\r\n        let time: number = frame == -1 ? currentTrackEntry.animation.duration : (frame - 1) / 30;\r\n        time = time < 0 ? 0 : time;\r\n        if (time >= currentTrackEntry.animation.duration) {\r\n            time = currentTrackEntry.animation.duration - 0.01;\r\n        }\r\n        currentTrackEntry.timeScale = 0;\r\n        currentTrackEntry.trackTime = time;\r\n    }\r\n}\r\n"]}